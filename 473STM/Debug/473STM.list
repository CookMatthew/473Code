
473STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001c7c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c88  20001c88  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119fd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb4  00000000  00000000  00031a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000339f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00034910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abed  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001299e  00000000  00000000  00050365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a19d1  00000000  00000000  00062d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001046d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040b8  00000000  00000000  00104728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004854 	.word	0x08004854

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004854 	.word	0x08004854

080001c8 <intToChar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char* intToChar(int16_t num) {
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	static char asciiNum[6];
	int pos = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
	if(num < 0) {
 80001d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	da0b      	bge.n	80001f6 <intToChar+0x2e>
		asciiNum[pos] = '-';
 80001de:	4a2f      	ldr	r2, [pc, #188]	; (800029c <intToChar+0xd4>)
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	4413      	add	r3, r2
 80001e4:	222d      	movs	r2, #45	; 0x2d
 80001e6:	701a      	strb	r2, [r3, #0]
		num = -num;
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	425b      	negs	r3, r3
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	80fb      	strh	r3, [r7, #6]
		pos++;
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	3301      	adds	r3, #1
 80001f4:	617b      	str	r3, [r7, #20]
	}
	uint16_t temp;
	bool nonzero = false;
 80001f6:	2301      	movs	r3, #1
 80001f8:	73fb      	strb	r3, [r7, #15]

	for(int i = 1000; i > 1; i /= 10) {
 80001fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	e027      	b.n	8000252 <intToChar+0x8a>
		temp = (num/i % 10);
 8000202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	fb92 f2f3 	sdiv	r2, r2, r3
 800020c:	4b24      	ldr	r3, [pc, #144]	; (80002a0 <intToChar+0xd8>)
 800020e:	fb83 1302 	smull	r1, r3, r3, r2
 8000212:	1099      	asrs	r1, r3, #2
 8000214:	17d3      	asrs	r3, r2, #31
 8000216:	1ac9      	subs	r1, r1, r3
 8000218:	460b      	mov	r3, r1
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	440b      	add	r3, r1
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	1ad1      	subs	r1, r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	81bb      	strh	r3, [r7, #12]
		if(temp != 0) {
 8000226:	89bb      	ldrh	r3, [r7, #12]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00a      	beq.n	8000242 <intToChar+0x7a>
			asciiNum[pos++] = temp + '0';
 800022c:	89bb      	ldrh	r3, [r7, #12]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	1c59      	adds	r1, r3, #1
 8000234:	6179      	str	r1, [r7, #20]
 8000236:	3230      	adds	r2, #48	; 0x30
 8000238:	b2d1      	uxtb	r1, r2
 800023a:	4a18      	ldr	r2, [pc, #96]	; (800029c <intToChar+0xd4>)
 800023c:	54d1      	strb	r1, [r2, r3]
			nonzero = true;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
	for(int i = 1000; i > 1; i /= 10) {
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <intToChar+0xd8>)
 8000246:	fb82 1203 	smull	r1, r2, r2, r3
 800024a:	1092      	asrs	r2, r2, #2
 800024c:	17db      	asrs	r3, r3, #31
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	613b      	str	r3, [r7, #16]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	2b01      	cmp	r3, #1
 8000256:	dcd4      	bgt.n	8000202 <intToChar+0x3a>
		}
	}
	asciiNum[pos++] = (num % 10) + '0';
 8000258:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <intToChar+0xd8>)
 800025e:	fb83 1302 	smull	r1, r3, r3, r2
 8000262:	1099      	asrs	r1, r3, #2
 8000264:	17d3      	asrs	r3, r2, #31
 8000266:	1ac9      	subs	r1, r1, r3
 8000268:	460b      	mov	r3, r1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	b21b      	sxth	r3, r3
 8000274:	b2da      	uxtb	r2, r3
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	1c59      	adds	r1, r3, #1
 800027a:	6179      	str	r1, [r7, #20]
 800027c:	3230      	adds	r2, #48	; 0x30
 800027e:	b2d1      	uxtb	r1, r2
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <intToChar+0xd4>)
 8000282:	54d1      	strb	r1, [r2, r3]
	asciiNum[pos] = '\0';
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <intToChar+0xd4>)
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	4413      	add	r3, r2
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]

	return asciiNum;
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <intToChar+0xd4>)
}
 8000290:	4618      	mov	r0, r3
 8000292:	371c      	adds	r7, #28
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	20000028 	.word	0x20000028
 80002a0:	66666667 	.word	0x66666667

080002a4 <uintToChar>:

char* uintToChar(uint16_t num) {
 80002a4:	b480      	push	{r7}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	80fb      	strh	r3, [r7, #6]
	static char asciiNum[5];
	int pos = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
	uint16_t temp;
	bool nonzero = false;
 80002b2:	2301      	movs	r3, #1
 80002b4:	73fb      	strb	r3, [r7, #15]

	for(int i = 1000; i > 1; i /= 10) {
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	e026      	b.n	800030c <uintToChar+0x68>
		temp = (num/i % 10);
 80002be:	88fa      	ldrh	r2, [r7, #6]
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	fb92 f2f3 	sdiv	r2, r2, r3
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <uintToChar+0xac>)
 80002c8:	fb83 1302 	smull	r1, r3, r3, r2
 80002cc:	1099      	asrs	r1, r3, #2
 80002ce:	17d3      	asrs	r3, r2, #31
 80002d0:	1ac9      	subs	r1, r1, r3
 80002d2:	460b      	mov	r3, r1
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	440b      	add	r3, r1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	1ad1      	subs	r1, r2, r3
 80002dc:	460b      	mov	r3, r1
 80002de:	81bb      	strh	r3, [r7, #12]
		if(temp != 0) {
 80002e0:	89bb      	ldrh	r3, [r7, #12]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00a      	beq.n	80002fc <uintToChar+0x58>
			asciiNum[pos++] = temp + '0';
 80002e6:	89bb      	ldrh	r3, [r7, #12]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	1c59      	adds	r1, r3, #1
 80002ee:	6179      	str	r1, [r7, #20]
 80002f0:	3230      	adds	r2, #48	; 0x30
 80002f2:	b2d1      	uxtb	r1, r2
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <uintToChar+0xb0>)
 80002f6:	54d1      	strb	r1, [r2, r3]
			nonzero = true;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]
	for(int i = 1000; i > 1; i /= 10) {
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <uintToChar+0xac>)
 8000300:	fb82 1203 	smull	r1, r2, r2, r3
 8000304:	1092      	asrs	r2, r2, #2
 8000306:	17db      	asrs	r3, r3, #31
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	2b01      	cmp	r3, #1
 8000310:	dcd5      	bgt.n	80002be <uintToChar+0x1a>
		}
	}
	asciiNum[pos++] = (num % 10) + '0';
 8000312:	88fa      	ldrh	r2, [r7, #6]
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <uintToChar+0xb4>)
 8000316:	fba3 1302 	umull	r1, r3, r3, r2
 800031a:	08d9      	lsrs	r1, r3, #3
 800031c:	460b      	mov	r3, r1
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	b29b      	uxth	r3, r3
 8000328:	b2da      	uxtb	r2, r3
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	1c59      	adds	r1, r3, #1
 800032e:	6179      	str	r1, [r7, #20]
 8000330:	3230      	adds	r2, #48	; 0x30
 8000332:	b2d1      	uxtb	r1, r2
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <uintToChar+0xb0>)
 8000336:	54d1      	strb	r1, [r2, r3]
	asciiNum[pos] = '\0';
 8000338:	4a06      	ldr	r2, [pc, #24]	; (8000354 <uintToChar+0xb0>)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	4413      	add	r3, r2
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]

	return asciiNum;
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <uintToChar+0xb0>)
}
 8000344:	4618      	mov	r0, r3
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	66666667 	.word	0x66666667
 8000354:	20000030 	.word	0x20000030
 8000358:	cccccccd 	.word	0xcccccccd

0800035c <readBNOReg>:

void readBNOReg(uint8_t reg, MemBuf* buffer) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af04      	add	r7, sp, #16
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	71fb      	strb	r3, [r7, #7]
	int16_t number;
	uint8_t result;
	HAL_I2C_Mem_Read(&hi2c1,BNO_ADDR,reg,1,&result,1,100);
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	b29a      	uxth	r2, r3
 800036c:	2364      	movs	r3, #100	; 0x64
 800036e:	9302      	str	r3, [sp, #8]
 8000370:	2301      	movs	r3, #1
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	f107 030b 	add.w	r3, r7, #11
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2301      	movs	r3, #1
 800037c:	2150      	movs	r1, #80	; 0x50
 800037e:	482e      	ldr	r0, [pc, #184]	; (8000438 <readBNOReg+0xdc>)
 8000380:	f001 fd92 	bl	8001ea8 <HAL_I2C_Mem_Read>
	number = (result << 8);
 8000384:	7afb      	ldrb	r3, [r7, #11]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	827b      	strh	r3, [r7, #18]
	HAL_I2C_Mem_Read(&hi2c1,BNO_ADDR,reg-1,1,&result,1,100);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	b29b      	uxth	r3, r3
 800038e:	3b01      	subs	r3, #1
 8000390:	b29a      	uxth	r2, r3
 8000392:	2364      	movs	r3, #100	; 0x64
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	2301      	movs	r3, #1
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	f107 030b 	add.w	r3, r7, #11
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	2150      	movs	r1, #80	; 0x50
 80003a4:	4824      	ldr	r0, [pc, #144]	; (8000438 <readBNOReg+0xdc>)
 80003a6:	f001 fd7f 	bl	8001ea8 <HAL_I2C_Mem_Read>
	number += result;
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	8a7b      	ldrh	r3, [r7, #18]
 80003b0:	4413      	add	r3, r2
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	827b      	strh	r3, [r7, #18]
	char* msg2 = intToChar(number);
 80003b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff04 	bl	80001c8 <intToChar>
 80003c0:	60f8      	str	r0, [r7, #12]
	for(int i = 0; i < 4; i++) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e017      	b.n	80003f8 <readBNOReg+0x9c>
		if(msg2[i] == '\0')
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	4413      	add	r3, r2
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d015      	beq.n	8000400 <readBNOReg+0xa4>
			break;
		buffer->msg[buffer->bufLen++] = msg2[i];
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	441a      	add	r2, r3
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80003e0:	1c58      	adds	r0, r3, #1
 80003e2:	6839      	ldr	r1, [r7, #0]
 80003e4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
 80003e8:	7811      	ldrb	r1, [r2, #0]
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	460a      	mov	r2, r1
 80003f0:	709a      	strb	r2, [r3, #2]
	for(int i = 0; i < 4; i++) {
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	3301      	adds	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	dde4      	ble.n	80003c8 <readBNOReg+0x6c>
 80003fe:	e000      	b.n	8000402 <readBNOReg+0xa6>
			break;
 8000400:	bf00      	nop
	}
	buffer->msg[buffer->bufLen++] = '\r';
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000408:	1c59      	adds	r1, r3, #1
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	4413      	add	r3, r2
 8000414:	220d      	movs	r2, #13
 8000416:	709a      	strb	r2, [r3, #2]
	buffer->msg[buffer->bufLen++] = '\n';
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800041e:	1c59      	adds	r1, r3, #1
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	220a      	movs	r2, #10
 800042c:	709a      	strb	r2, [r3, #2]
}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000003c 	.word	0x2000003c

0800043c <readBMP>:

void readBMP(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af04      	add	r7, sp, #16
	while(1) {
		if(bmpBuf.sent == false) {
 8000442:	4b88      	ldr	r3, [pc, #544]	; (8000664 <readBMP+0x228>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b01      	cmp	r3, #1
 800044a:	f040 8105 	bne.w	8000658 <readBMP+0x21c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044e:	b672      	cpsid	i
}
 8000450:	bf00      	nop
			__disable_irq();

			bmpBuf.bufLen = 0;
 8000452:	4b84      	ldr	r3, [pc, #528]	; (8000664 <readBMP+0x228>)
 8000454:	2200      	movs	r2, #0
 8000456:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

			uint8_t result;
			uint16_t num;
			HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xFA,1,&result,1,100);
 800045a:	2364      	movs	r3, #100	; 0x64
 800045c:	9302      	str	r3, [sp, #8]
 800045e:	2301      	movs	r3, #1
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	f107 0317 	add.w	r3, r7, #23
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2301      	movs	r3, #1
 800046a:	22fa      	movs	r2, #250	; 0xfa
 800046c:	21ee      	movs	r1, #238	; 0xee
 800046e:	487e      	ldr	r0, [pc, #504]	; (8000668 <readBMP+0x22c>)
 8000470:	f001 fd1a 	bl	8001ea8 <HAL_I2C_Mem_Read>
			num = result << 8;
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	b29b      	uxth	r3, r3
 8000478:	021b      	lsls	r3, r3, #8
 800047a:	83fb      	strh	r3, [r7, #30]
			HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xFB,1,&result,1,100);
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	9302      	str	r3, [sp, #8]
 8000480:	2301      	movs	r3, #1
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	f107 0317 	add.w	r3, r7, #23
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2301      	movs	r3, #1
 800048c:	22fb      	movs	r2, #251	; 0xfb
 800048e:	21ee      	movs	r1, #238	; 0xee
 8000490:	4875      	ldr	r0, [pc, #468]	; (8000668 <readBMP+0x22c>)
 8000492:	f001 fd09 	bl	8001ea8 <HAL_I2C_Mem_Read>
			num += result;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
 8000498:	b29a      	uxth	r2, r3
 800049a:	8bfb      	ldrh	r3, [r7, #30]
 800049c:	4413      	add	r3, r2
 800049e:	83fb      	strh	r3, [r7, #30]

			char msg[6] = "Temp: ";
 80004a0:	4a72      	ldr	r2, [pc, #456]	; (800066c <readBMP+0x230>)
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004aa:	6018      	str	r0, [r3, #0]
 80004ac:	3304      	adds	r3, #4
 80004ae:	8019      	strh	r1, [r3, #0]
			char * tmp = uintToChar(num);
 80004b0:	8bfb      	ldrh	r3, [r7, #30]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fef6 	bl	80002a4 <uintToChar>
 80004b8:	61b8      	str	r0, [r7, #24]
			for(int i = 0; i < 6; i++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004be:	e012      	b.n	80004e6 <readBMP+0xaa>
				bmpBuf.msg[bmpBuf.bufLen++] = msg[i];
 80004c0:	4b68      	ldr	r3, [pc, #416]	; (8000664 <readBMP+0x228>)
 80004c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	4966      	ldr	r1, [pc, #408]	; (8000664 <readBMP+0x228>)
 80004ca:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80004ce:	f107 0110 	add.w	r1, r7, #16
 80004d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d4:	440a      	add	r2, r1
 80004d6:	7811      	ldrb	r1, [r2, #0]
 80004d8:	4a62      	ldr	r2, [pc, #392]	; (8000664 <readBMP+0x228>)
 80004da:	4413      	add	r3, r2
 80004dc:	460a      	mov	r2, r1
 80004de:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 6; i++) {
 80004e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e2:	3301      	adds	r3, #1
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e8:	2b05      	cmp	r3, #5
 80004ea:	dde9      	ble.n	80004c0 <readBMP+0x84>
			}
			for(int i = 0; i < 4; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80004f0:	e017      	b.n	8000522 <readBMP+0xe6>
				if(tmp[i] == '\0') {
 80004f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	4413      	add	r3, r2
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d015      	beq.n	800052a <readBMP+0xee>
					break;
				}
				bmpBuf.msg[bmpBuf.bufLen++] = tmp[i];
 80004fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000500:	69ba      	ldr	r2, [r7, #24]
 8000502:	441a      	add	r2, r3
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <readBMP+0x228>)
 8000506:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800050a:	1c59      	adds	r1, r3, #1
 800050c:	4855      	ldr	r0, [pc, #340]	; (8000664 <readBMP+0x228>)
 800050e:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 8000512:	7811      	ldrb	r1, [r2, #0]
 8000514:	4a53      	ldr	r2, [pc, #332]	; (8000664 <readBMP+0x228>)
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 4; i++) {
 800051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051e:	3301      	adds	r3, #1
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
 8000522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000524:	2b03      	cmp	r3, #3
 8000526:	dde4      	ble.n	80004f2 <readBMP+0xb6>
 8000528:	e000      	b.n	800052c <readBMP+0xf0>
					break;
 800052a:	bf00      	nop
			}
			bmpBuf.msg[bmpBuf.bufLen++] = '\r';
 800052c:	4b4d      	ldr	r3, [pc, #308]	; (8000664 <readBMP+0x228>)
 800052e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	494b      	ldr	r1, [pc, #300]	; (8000664 <readBMP+0x228>)
 8000536:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 800053a:	4a4a      	ldr	r2, [pc, #296]	; (8000664 <readBMP+0x228>)
 800053c:	4413      	add	r3, r2
 800053e:	220d      	movs	r2, #13
 8000540:	709a      	strb	r2, [r3, #2]
			bmpBuf.msg[bmpBuf.bufLen++] = '\n';
 8000542:	4b48      	ldr	r3, [pc, #288]	; (8000664 <readBMP+0x228>)
 8000544:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	4946      	ldr	r1, [pc, #280]	; (8000664 <readBMP+0x228>)
 800054c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000550:	4a44      	ldr	r2, [pc, #272]	; (8000664 <readBMP+0x228>)
 8000552:	4413      	add	r3, r2
 8000554:	220a      	movs	r2, #10
 8000556:	709a      	strb	r2, [r3, #2]

			HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xF7,1,&result,1,100);
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	9302      	str	r3, [sp, #8]
 800055c:	2301      	movs	r3, #1
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	f107 0317 	add.w	r3, r7, #23
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	22f7      	movs	r2, #247	; 0xf7
 800056a:	21ee      	movs	r1, #238	; 0xee
 800056c:	483e      	ldr	r0, [pc, #248]	; (8000668 <readBMP+0x22c>)
 800056e:	f001 fc9b 	bl	8001ea8 <HAL_I2C_Mem_Read>
			num = result << 8;
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	b29b      	uxth	r3, r3
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	83fb      	strh	r3, [r7, #30]
			HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xF8,1,&result,1,100);
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	f107 0317 	add.w	r3, r7, #23
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	22f8      	movs	r2, #248	; 0xf8
 800058c:	21ee      	movs	r1, #238	; 0xee
 800058e:	4836      	ldr	r0, [pc, #216]	; (8000668 <readBMP+0x22c>)
 8000590:	f001 fc8a 	bl	8001ea8 <HAL_I2C_Mem_Read>
			num += result;
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	b29a      	uxth	r2, r3
 8000598:	8bfb      	ldrh	r3, [r7, #30]
 800059a:	4413      	add	r3, r2
 800059c:	83fb      	strh	r3, [r7, #30]

			char msg2[10] = "Pressure: ";
 800059e:	4a34      	ldr	r2, [pc, #208]	; (8000670 <readBMP+0x234>)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a4:	c303      	stmia	r3!, {r0, r1}
 80005a6:	801a      	strh	r2, [r3, #0]
			tmp = uintToChar(num);
 80005a8:	8bfb      	ldrh	r3, [r7, #30]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe7a 	bl	80002a4 <uintToChar>
 80005b0:	61b8      	str	r0, [r7, #24]
			for(int i = 0; i < 10; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
 80005b6:	e011      	b.n	80005dc <readBMP+0x1a0>
				bmpBuf.msg[bmpBuf.bufLen++] = msg2[i];
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <readBMP+0x228>)
 80005ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	4928      	ldr	r1, [pc, #160]	; (8000664 <readBMP+0x228>)
 80005c2:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80005c6:	1d39      	adds	r1, r7, #4
 80005c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ca:	440a      	add	r2, r1
 80005cc:	7811      	ldrb	r1, [r2, #0]
 80005ce:	4a25      	ldr	r2, [pc, #148]	; (8000664 <readBMP+0x228>)
 80005d0:	4413      	add	r3, r2
 80005d2:	460a      	mov	r2, r1
 80005d4:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 10; i++) {
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d8:	3301      	adds	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	2b09      	cmp	r3, #9
 80005e0:	ddea      	ble.n	80005b8 <readBMP+0x17c>
			}
			for(int i = 0; i < 4; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
 80005e6:	e017      	b.n	8000618 <readBMP+0x1dc>
				if(tmp[i] == '\0') {
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	69ba      	ldr	r2, [r7, #24]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d015      	beq.n	8000620 <readBMP+0x1e4>
					break;
				}
				bmpBuf.msg[bmpBuf.bufLen++] = tmp[i];
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	69ba      	ldr	r2, [r7, #24]
 80005f8:	441a      	add	r2, r3
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <readBMP+0x228>)
 80005fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000600:	1c59      	adds	r1, r3, #1
 8000602:	4818      	ldr	r0, [pc, #96]	; (8000664 <readBMP+0x228>)
 8000604:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 8000608:	7811      	ldrb	r1, [r2, #0]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <readBMP+0x228>)
 800060c:	4413      	add	r3, r2
 800060e:	460a      	mov	r2, r1
 8000610:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 4; i++) {
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	3301      	adds	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	2b03      	cmp	r3, #3
 800061c:	dde4      	ble.n	80005e8 <readBMP+0x1ac>
 800061e:	e000      	b.n	8000622 <readBMP+0x1e6>
					break;
 8000620:	bf00      	nop
			}
			bmpBuf.msg[bmpBuf.bufLen++] = '\r';
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <readBMP+0x228>)
 8000624:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <readBMP+0x228>)
 800062c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <readBMP+0x228>)
 8000632:	4413      	add	r3, r2
 8000634:	220d      	movs	r2, #13
 8000636:	709a      	strb	r2, [r3, #2]
			bmpBuf.msg[bmpBuf.bufLen++] = '\n';
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <readBMP+0x228>)
 800063a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	4908      	ldr	r1, [pc, #32]	; (8000664 <readBMP+0x228>)
 8000642:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <readBMP+0x228>)
 8000648:	4413      	add	r3, r2
 800064a:	220a      	movs	r2, #10
 800064c:	709a      	strb	r2, [r3, #2]

			bmpBuf.sent = true;
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <readBMP+0x228>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000654:	b662      	cpsie	i
}
 8000656:	bf00      	nop
			__enable_irq();
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <readBMP+0x238>)
 800065a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800065e:	601a      	str	r2, [r3, #0]
		if(bmpBuf.sent == false) {
 8000660:	e6ef      	b.n	8000442 <readBMP+0x6>
 8000662:	bf00      	nop
 8000664:	20001870 	.word	0x20001870
 8000668:	2000003c 	.word	0x2000003c
 800066c:	0800486c 	.word	0x0800486c
 8000670:	08004874 	.word	0x08004874
 8000674:	e000ed04 	.word	0xe000ed04

08000678 <readBNOAccel>:
	}

}

void readBNOAccel(void) {
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0
	while(1) {
		if(bnoAccelBuf.sent == false) {
 800067e:	4b6c      	ldr	r3, [pc, #432]	; (8000830 <readBNOAccel+0x1b8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	f040 80cd 	bne.w	8000824 <readBNOAccel+0x1ac>
			//Accel read
			//X
			bnoAccelBuf.bufLen = 0;
 800068a:	4b69      	ldr	r3, [pc, #420]	; (8000830 <readBNOAccel+0x1b8>)
 800068c:	2200      	movs	r2, #0
 800068e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  __ASM volatile ("cpsid i" : : : "memory");
 8000692:	b672      	cpsid	i
}
 8000694:	bf00      	nop

			__disable_irq();

			char msg2[13] = "Accel  axis: ";
 8000696:	4b67      	ldr	r3, [pc, #412]	; (8000834 <readBNOAccel+0x1bc>)
 8000698:	463c      	mov	r4, r7
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	c407      	stmia	r4!, {r0, r1, r2}
 800069e:	7023      	strb	r3, [r4, #0]
			for(int i = 0; i < 6; i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
 80006a4:	e011      	b.n	80006ca <readBNOAccel+0x52>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 80006a6:	4b62      	ldr	r3, [pc, #392]	; (8000830 <readBNOAccel+0x1b8>)
 80006a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	4960      	ldr	r1, [pc, #384]	; (8000830 <readBNOAccel+0x1b8>)
 80006b0:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80006b4:	4639      	mov	r1, r7
 80006b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b8:	440a      	add	r2, r1
 80006ba:	7811      	ldrb	r1, [r2, #0]
 80006bc:	4a5c      	ldr	r2, [pc, #368]	; (8000830 <readBNOAccel+0x1b8>)
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 6; i++) {
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	3301      	adds	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	ddea      	ble.n	80006a6 <readBNOAccel+0x2e>
			}
			bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = 'X';
 80006d0:	4b57      	ldr	r3, [pc, #348]	; (8000830 <readBNOAccel+0x1b8>)
 80006d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	4955      	ldr	r1, [pc, #340]	; (8000830 <readBNOAccel+0x1b8>)
 80006da:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80006de:	4a54      	ldr	r2, [pc, #336]	; (8000830 <readBNOAccel+0x1b8>)
 80006e0:	4413      	add	r3, r2
 80006e2:	2258      	movs	r2, #88	; 0x58
 80006e4:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 80006e6:	2306      	movs	r3, #6
 80006e8:	623b      	str	r3, [r7, #32]
 80006ea:	e011      	b.n	8000710 <readBNOAccel+0x98>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 80006ec:	4b50      	ldr	r3, [pc, #320]	; (8000830 <readBNOAccel+0x1b8>)
 80006ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	494e      	ldr	r1, [pc, #312]	; (8000830 <readBNOAccel+0x1b8>)
 80006f6:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80006fa:	4639      	mov	r1, r7
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	440a      	add	r2, r1
 8000700:	7811      	ldrb	r1, [r2, #0]
 8000702:	4a4b      	ldr	r2, [pc, #300]	; (8000830 <readBNOAccel+0x1b8>)
 8000704:	4413      	add	r3, r2
 8000706:	460a      	mov	r2, r1
 8000708:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 800070a:	6a3b      	ldr	r3, [r7, #32]
 800070c:	3301      	adds	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	2b0c      	cmp	r3, #12
 8000714:	ddea      	ble.n	80006ec <readBNOAccel+0x74>
			}
			readBNOReg(0x09,&bnoAccelBuf);
 8000716:	4946      	ldr	r1, [pc, #280]	; (8000830 <readBNOAccel+0x1b8>)
 8000718:	2009      	movs	r0, #9
 800071a:	f7ff fe1f 	bl	800035c <readBNOReg>

			//Y
			for(int i = 0; i < 6; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	e011      	b.n	8000748 <readBNOAccel+0xd0>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 8000724:	4b42      	ldr	r3, [pc, #264]	; (8000830 <readBNOAccel+0x1b8>)
 8000726:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4940      	ldr	r1, [pc, #256]	; (8000830 <readBNOAccel+0x1b8>)
 800072e:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000732:	4639      	mov	r1, r7
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	440a      	add	r2, r1
 8000738:	7811      	ldrb	r1, [r2, #0]
 800073a:	4a3d      	ldr	r2, [pc, #244]	; (8000830 <readBNOAccel+0x1b8>)
 800073c:	4413      	add	r3, r2
 800073e:	460a      	mov	r2, r1
 8000740:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 6; i++) {
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3301      	adds	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	2b05      	cmp	r3, #5
 800074c:	ddea      	ble.n	8000724 <readBNOAccel+0xac>
			}
			bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = 'Y';
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <readBNOAccel+0x1b8>)
 8000750:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	4936      	ldr	r1, [pc, #216]	; (8000830 <readBNOAccel+0x1b8>)
 8000758:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 800075c:	4a34      	ldr	r2, [pc, #208]	; (8000830 <readBNOAccel+0x1b8>)
 800075e:	4413      	add	r3, r2
 8000760:	2259      	movs	r2, #89	; 0x59
 8000762:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 8000764:	2306      	movs	r3, #6
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	e011      	b.n	800078e <readBNOAccel+0x116>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <readBNOAccel+0x1b8>)
 800076c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	492f      	ldr	r1, [pc, #188]	; (8000830 <readBNOAccel+0x1b8>)
 8000774:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000778:	4639      	mov	r1, r7
 800077a:	69ba      	ldr	r2, [r7, #24]
 800077c:	440a      	add	r2, r1
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <readBNOAccel+0x1b8>)
 8000782:	4413      	add	r3, r2
 8000784:	460a      	mov	r2, r1
 8000786:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	3301      	adds	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	2b0c      	cmp	r3, #12
 8000792:	ddea      	ble.n	800076a <readBNOAccel+0xf2>
			}
			readBNOReg(0x0B,&bnoAccelBuf);
 8000794:	4926      	ldr	r1, [pc, #152]	; (8000830 <readBNOAccel+0x1b8>)
 8000796:	200b      	movs	r0, #11
 8000798:	f7ff fde0 	bl	800035c <readBNOReg>

			//Z

			for(int i = 0; i < 6; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e011      	b.n	80007c6 <readBNOAccel+0x14e>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <readBNOAccel+0x1b8>)
 80007a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4921      	ldr	r1, [pc, #132]	; (8000830 <readBNOAccel+0x1b8>)
 80007ac:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80007b0:	4639      	mov	r1, r7
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	440a      	add	r2, r1
 80007b6:	7811      	ldrb	r1, [r2, #0]
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <readBNOAccel+0x1b8>)
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 6; i++) {
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2b05      	cmp	r3, #5
 80007ca:	ddea      	ble.n	80007a2 <readBNOAccel+0x12a>
			}
			bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = 'Z';
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <readBNOAccel+0x1b8>)
 80007ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4916      	ldr	r1, [pc, #88]	; (8000830 <readBNOAccel+0x1b8>)
 80007d6:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <readBNOAccel+0x1b8>)
 80007dc:	4413      	add	r3, r2
 80007de:	225a      	movs	r2, #90	; 0x5a
 80007e0:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 80007e2:	2306      	movs	r3, #6
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	e011      	b.n	800080c <readBNOAccel+0x194>
				bnoAccelBuf.msg[bnoAccelBuf.bufLen++] = msg2[i];
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <readBNOAccel+0x1b8>)
 80007ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	490f      	ldr	r1, [pc, #60]	; (8000830 <readBNOAccel+0x1b8>)
 80007f2:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80007f6:	4639      	mov	r1, r7
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	440a      	add	r2, r1
 80007fc:	7811      	ldrb	r1, [r2, #0]
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <readBNOAccel+0x1b8>)
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	709a      	strb	r2, [r3, #2]
			for(int i = 6; i < 13; i++) {
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b0c      	cmp	r3, #12
 8000810:	ddea      	ble.n	80007e8 <readBNOAccel+0x170>
			}
			readBNOReg(0x09,&bnoAccelBuf);
 8000812:	4907      	ldr	r1, [pc, #28]	; (8000830 <readBNOAccel+0x1b8>)
 8000814:	2009      	movs	r0, #9
 8000816:	f7ff fda1 	bl	800035c <readBNOReg>

			bnoAccelBuf.sent = true;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <readBNOAccel+0x1b8>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000820:	b662      	cpsie	i
}
 8000822:	bf00      	nop
			__enable_irq();
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <readBNOAccel+0x1c0>)
 8000826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800082a:	601a      	str	r2, [r3, #0]
		if(bnoAccelBuf.sent == false) {
 800082c:	e727      	b.n	800067e <readBNOAccel+0x6>
 800082e:	bf00      	nop
 8000830:	20001bb4 	.word	0x20001bb4
 8000834:	08004880 	.word	0x08004880
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <readBNOMag>:
	}
}

void readBNOMag(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
	while(1) {
		if(bnoMagBuf.sent == false) {
 8000842:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <readBNOMag+0x1bc>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b01      	cmp	r3, #1
 800084a:	f040 80d0 	bne.w	80009ee <readBNOMag+0x1b2>
			bnoMagBuf.bufLen = 0;
 800084e:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <readBNOMag+0x1bc>)
 8000850:	2200      	movs	r2, #0
 8000852:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  __ASM volatile ("cpsid i" : : : "memory");
 8000856:	b672      	cpsid	i
}
 8000858:	bf00      	nop

			__disable_irq();
			char msg1[11] = "Mag  axis: ";
 800085a:	4a68      	ldr	r2, [pc, #416]	; (80009fc <readBNOMag+0x1c0>)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000860:	c303      	stmia	r3!, {r0, r1}
 8000862:	801a      	strh	r2, [r3, #0]
 8000864:	3302      	adds	r3, #2
 8000866:	0c12      	lsrs	r2, r2, #16
 8000868:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
 800086e:	e011      	b.n	8000894 <readBNOMag+0x58>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 8000870:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <readBNOMag+0x1bc>)
 8000872:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	495f      	ldr	r1, [pc, #380]	; (80009f8 <readBNOMag+0x1bc>)
 800087a:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 800087e:	1d39      	adds	r1, r7, #4
 8000880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000882:	440a      	add	r2, r1
 8000884:	7811      	ldrb	r1, [r2, #0]
 8000886:	4a5c      	ldr	r2, [pc, #368]	; (80009f8 <readBNOMag+0x1bc>)
 8000888:	4413      	add	r3, r2
 800088a:	460a      	mov	r2, r1
 800088c:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 4; i++) {
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	2b03      	cmp	r3, #3
 8000898:	ddea      	ble.n	8000870 <readBNOMag+0x34>
			}
			bnoMagBuf.msg[bnoMagBuf.bufLen++] = 'X';
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <readBNOMag+0x1bc>)
 800089c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	4955      	ldr	r1, [pc, #340]	; (80009f8 <readBNOMag+0x1bc>)
 80008a4:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80008a8:	4a53      	ldr	r2, [pc, #332]	; (80009f8 <readBNOMag+0x1bc>)
 80008aa:	4413      	add	r3, r2
 80008ac:	2258      	movs	r2, #88	; 0x58
 80008ae:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 80008b0:	2304      	movs	r3, #4
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	e011      	b.n	80008da <readBNOMag+0x9e>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <readBNOMag+0x1bc>)
 80008b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	494e      	ldr	r1, [pc, #312]	; (80009f8 <readBNOMag+0x1bc>)
 80008c0:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80008c4:	1d39      	adds	r1, r7, #4
 80008c6:	6a3a      	ldr	r2, [r7, #32]
 80008c8:	440a      	add	r2, r1
 80008ca:	7811      	ldrb	r1, [r2, #0]
 80008cc:	4a4a      	ldr	r2, [pc, #296]	; (80009f8 <readBNOMag+0x1bc>)
 80008ce:	4413      	add	r3, r2
 80008d0:	460a      	mov	r2, r1
 80008d2:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	3301      	adds	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2b0a      	cmp	r3, #10
 80008de:	ddea      	ble.n	80008b6 <readBNOMag+0x7a>
			}
			readBNOReg(0xFF,&bnoMagBuf);
 80008e0:	4945      	ldr	r1, [pc, #276]	; (80009f8 <readBNOMag+0x1bc>)
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	f7ff fd3a 	bl	800035c <readBNOReg>

			for(int i = 0; i < 4; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
 80008ec:	e011      	b.n	8000912 <readBNOMag+0xd6>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <readBNOMag+0x1bc>)
 80008f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	4940      	ldr	r1, [pc, #256]	; (80009f8 <readBNOMag+0x1bc>)
 80008f8:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	440a      	add	r2, r1
 8000902:	7811      	ldrb	r1, [r2, #0]
 8000904:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <readBNOMag+0x1bc>)
 8000906:	4413      	add	r3, r2
 8000908:	460a      	mov	r2, r1
 800090a:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 4; i++) {
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	3301      	adds	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	2b03      	cmp	r3, #3
 8000916:	ddea      	ble.n	80008ee <readBNOMag+0xb2>
			}
			bnoMagBuf.msg[bnoMagBuf.bufLen++] = 'Y';
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <readBNOMag+0x1bc>)
 800091a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	4935      	ldr	r1, [pc, #212]	; (80009f8 <readBNOMag+0x1bc>)
 8000922:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000926:	4a34      	ldr	r2, [pc, #208]	; (80009f8 <readBNOMag+0x1bc>)
 8000928:	4413      	add	r3, r2
 800092a:	2259      	movs	r2, #89	; 0x59
 800092c:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 800092e:	2304      	movs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	e011      	b.n	8000958 <readBNOMag+0x11c>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 8000934:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <readBNOMag+0x1bc>)
 8000936:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	492e      	ldr	r1, [pc, #184]	; (80009f8 <readBNOMag+0x1bc>)
 800093e:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000942:	1d39      	adds	r1, r7, #4
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	440a      	add	r2, r1
 8000948:	7811      	ldrb	r1, [r2, #0]
 800094a:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <readBNOMag+0x1bc>)
 800094c:	4413      	add	r3, r2
 800094e:	460a      	mov	r2, r1
 8000950:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	3301      	adds	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2b0a      	cmp	r3, #10
 800095c:	ddea      	ble.n	8000934 <readBNOMag+0xf8>
			}
			readBNOReg(0x11,&bnoMagBuf);
 800095e:	4926      	ldr	r1, [pc, #152]	; (80009f8 <readBNOMag+0x1bc>)
 8000960:	2011      	movs	r0, #17
 8000962:	f7ff fcfb 	bl	800035c <readBNOReg>

			for(int i = 0; i < 4; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e011      	b.n	8000990 <readBNOMag+0x154>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <readBNOMag+0x1bc>)
 800096e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	4920      	ldr	r1, [pc, #128]	; (80009f8 <readBNOMag+0x1bc>)
 8000976:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 800097a:	1d39      	adds	r1, r7, #4
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	440a      	add	r2, r1
 8000980:	7811      	ldrb	r1, [r2, #0]
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <readBNOMag+0x1bc>)
 8000984:	4413      	add	r3, r2
 8000986:	460a      	mov	r2, r1
 8000988:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 4; i++) {
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	2b03      	cmp	r3, #3
 8000994:	ddea      	ble.n	800096c <readBNOMag+0x130>
			}
			bnoMagBuf.msg[bnoMagBuf.bufLen++] = 'Z';
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <readBNOMag+0x1bc>)
 8000998:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	4916      	ldr	r1, [pc, #88]	; (80009f8 <readBNOMag+0x1bc>)
 80009a0:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <readBNOMag+0x1bc>)
 80009a6:	4413      	add	r3, r2
 80009a8:	225a      	movs	r2, #90	; 0x5a
 80009aa:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 80009ac:	2304      	movs	r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	e011      	b.n	80009d6 <readBNOMag+0x19a>
				bnoMagBuf.msg[bnoMagBuf.bufLen++] = msg1[i];
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <readBNOMag+0x1bc>)
 80009b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	490f      	ldr	r1, [pc, #60]	; (80009f8 <readBNOMag+0x1bc>)
 80009bc:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 80009c0:	1d39      	adds	r1, r7, #4
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	440a      	add	r2, r1
 80009c6:	7811      	ldrb	r1, [r2, #0]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <readBNOMag+0x1bc>)
 80009ca:	4413      	add	r3, r2
 80009cc:	460a      	mov	r2, r1
 80009ce:	709a      	strb	r2, [r3, #2]
			for(int i = 4; i < 11; i++) {
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	3301      	adds	r3, #1
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	2b0a      	cmp	r3, #10
 80009da:	ddea      	ble.n	80009b2 <readBNOMag+0x176>
			}
			readBNOReg(0x13,&bnoMagBuf);
 80009dc:	4906      	ldr	r1, [pc, #24]	; (80009f8 <readBNOMag+0x1bc>)
 80009de:	2013      	movs	r0, #19
 80009e0:	f7ff fcbc 	bl	800035c <readBNOReg>
			bnoMagBuf.sent = true;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <readBNOMag+0x1bc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009ea:	b662      	cpsie	i
}
 80009ec:	bf00      	nop
			__enable_irq();
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <readBNOMag+0x1c4>)
 80009f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f4:	601a      	str	r2, [r3, #0]
		if(bnoMagBuf.sent == false) {
 80009f6:	e724      	b.n	8000842 <readBNOMag+0x6>
 80009f8:	20001ae4 	.word	0x20001ae4
 80009fc:	08004890 	.word	0x08004890
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <readBNOGyro>:
	}

}

void readBNOGyro(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
	//BNO IMU MSB to LSB
	//Set UNIT_SEL register to desired values

	while(1) {
		if(bnoGyroBuf.sent == false) {
 8000a0a:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f040 80cd 	bne.w	8000bb0 <readBNOGyro+0x1ac>
			bnoGyroBuf.bufLen = 0;
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1e:	b672      	cpsid	i
}
 8000a20:	bf00      	nop
			//Gyro read
			//X

			__disable_irq();

			char msg1[12] = "Gyro  axis: ";
 8000a22:	4a67      	ldr	r2, [pc, #412]	; (8000bc0 <readBNOGyro+0x1bc>)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			for(int i = 0; i < 5; i++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a30:	e011      	b.n	8000a56 <readBNOGyro+0x52>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000a32:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	4960      	ldr	r1, [pc, #384]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a3c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	440a      	add	r2, r1
 8000a46:	7811      	ldrb	r1, [r2, #0]
 8000a48:	4a5c      	ldr	r2, [pc, #368]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 5; i++) {
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	3301      	adds	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	ddea      	ble.n	8000a32 <readBNOGyro+0x2e>
			}
			bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = 'X';
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	4955      	ldr	r1, [pc, #340]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a66:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000a6a:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2258      	movs	r2, #88	; 0x58
 8000a70:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000a72:	2305      	movs	r3, #5
 8000a74:	623b      	str	r3, [r7, #32]
 8000a76:	e011      	b.n	8000a9c <readBNOGyro+0x98>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	494e      	ldr	r1, [pc, #312]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a82:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000a86:	1d39      	adds	r1, r7, #4
 8000a88:	6a3a      	ldr	r2, [r7, #32]
 8000a8a:	440a      	add	r2, r1
 8000a8c:	7811      	ldrb	r1, [r2, #0]
 8000a8e:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <readBNOGyro+0x1b8>)
 8000a90:	4413      	add	r3, r2
 8000a92:	460a      	mov	r2, r1
 8000a94:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	2b0b      	cmp	r3, #11
 8000aa0:	ddea      	ble.n	8000a78 <readBNOGyro+0x74>
			}
			readBNOReg(0x15,&bnoGyroBuf);
 8000aa2:	4946      	ldr	r1, [pc, #280]	; (8000bbc <readBNOGyro+0x1b8>)
 8000aa4:	2015      	movs	r0, #21
 8000aa6:	f7ff fc59 	bl	800035c <readBNOReg>


			//Y

			for(int i = 0; i < 5; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e011      	b.n	8000ad4 <readBNOGyro+0xd0>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <readBNOGyro+0x1b8>)
 8000ab2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	4940      	ldr	r1, [pc, #256]	; (8000bbc <readBNOGyro+0x1b8>)
 8000aba:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000abe:	1d39      	adds	r1, r7, #4
 8000ac0:	69fa      	ldr	r2, [r7, #28]
 8000ac2:	440a      	add	r2, r1
 8000ac4:	7811      	ldrb	r1, [r2, #0]
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <readBNOGyro+0x1b8>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	460a      	mov	r2, r1
 8000acc:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 5; i++) {
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	ddea      	ble.n	8000ab0 <readBNOGyro+0xac>
			}
			bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = 'Y';
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <readBNOGyro+0x1b8>)
 8000adc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	4936      	ldr	r1, [pc, #216]	; (8000bbc <readBNOGyro+0x1b8>)
 8000ae4:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000ae8:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <readBNOGyro+0x1b8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	2259      	movs	r2, #89	; 0x59
 8000aee:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000af0:	2305      	movs	r3, #5
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	e011      	b.n	8000b1a <readBNOGyro+0x116>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <readBNOGyro+0x1b8>)
 8000af8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	492f      	ldr	r1, [pc, #188]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b00:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000b04:	1d39      	adds	r1, r7, #4
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	440a      	add	r2, r1
 8000b0a:	7811      	ldrb	r1, [r2, #0]
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	460a      	mov	r2, r1
 8000b12:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	3301      	adds	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	2b0b      	cmp	r3, #11
 8000b1e:	ddea      	ble.n	8000af6 <readBNOGyro+0xf2>
			}
			readBNOReg(0x17,&bnoGyroBuf);
 8000b20:	4926      	ldr	r1, [pc, #152]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b22:	2017      	movs	r0, #23
 8000b24:	f7ff fc1a 	bl	800035c <readBNOReg>



			//Z
			for(int i = 0; i < 5; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e011      	b.n	8000b52 <readBNOGyro+0x14e>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b30:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	4921      	ldr	r1, [pc, #132]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b38:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000b3c:	1d39      	adds	r1, r7, #4
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b46:	4413      	add	r3, r2
 8000b48:	460a      	mov	r2, r1
 8000b4a:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < 5; i++) {
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	ddea      	ble.n	8000b2e <readBNOGyro+0x12a>
			}
			bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = 'Z';
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	4916      	ldr	r1, [pc, #88]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b62:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b68:	4413      	add	r3, r2
 8000b6a:	225a      	movs	r2, #90	; 0x5a
 8000b6c:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000b6e:	2305      	movs	r3, #5
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	e011      	b.n	8000b98 <readBNOGyro+0x194>
				bnoGyroBuf.msg[bnoGyroBuf.bufLen++] = msg1[i];
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b76:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	490f      	ldr	r1, [pc, #60]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b7e:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
 8000b82:	1d39      	adds	r1, r7, #4
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	440a      	add	r2, r1
 8000b88:	7811      	ldrb	r1, [r2, #0]
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <readBNOGyro+0x1b8>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	460a      	mov	r2, r1
 8000b90:	709a      	strb	r2, [r3, #2]
			for(int i = 5; i < 12; i++) {
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	3301      	adds	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	2b0b      	cmp	r3, #11
 8000b9c:	ddea      	ble.n	8000b74 <readBNOGyro+0x170>
			}
			readBNOReg(0x19,&bnoGyroBuf);
 8000b9e:	4907      	ldr	r1, [pc, #28]	; (8000bbc <readBNOGyro+0x1b8>)
 8000ba0:	2019      	movs	r0, #25
 8000ba2:	f7ff fbdb 	bl	800035c <readBNOReg>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ba6:	b662      	cpsie	i
}
 8000ba8:	bf00      	nop
			__enable_irq();


			bnoGyroBuf.sent = true;
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <readBNOGyro+0x1b8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <readBNOGyro+0x1c0>)
 8000bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb6:	601a      	str	r2, [r3, #0]
		if(bnoGyroBuf.sent == false) {
 8000bb8:	e727      	b.n	8000a0a <readBNOGyro+0x6>
 8000bba:	bf00      	nop
 8000bbc:	20001990 	.word	0x20001990
 8000bc0:	0800489c 	.word	0x0800489c
 8000bc4:	e000ed04 	.word	0xe000ed04

08000bc8 <bmpPrint>:
	}
}

void bmpPrint(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	//uint8_t msg[9] = "Task one\n";
	while(1) {
		if(bmpBuf.sent == true) {
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <bmpPrint+0x48>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d117      	bne.n	8000c06 <bmpPrint+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd6:	b672      	cpsid	i
}
 8000bd8:	bf00      	nop
			__disable_irq();
			HAL_UART_Transmit(&huart1,bmpBuf.msg,bmpBuf.bufLen,100);
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <bmpPrint+0x48>)
 8000bdc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	490b      	ldr	r1, [pc, #44]	; (8000c14 <bmpPrint+0x4c>)
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <bmpPrint+0x50>)
 8000be8:	f003 fa8e 	bl	8004108 <HAL_UART_Transmit>
			bmpBuf.bufLen = 0;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <bmpPrint+0x48>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			bmpBuf.sent = false;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <bmpPrint+0x48>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bfa:	b662      	cpsie	i
}
 8000bfc:	bf00      	nop
			__enable_irq();
			delayTask(500);
 8000bfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c02:	f000 f891 	bl	8000d28 <delayTask>
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <bmpPrint+0x54>)
 8000c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0c:	601a      	str	r2, [r3, #0]
		if(bmpBuf.sent == true) {
 8000c0e:	e7dd      	b.n	8000bcc <bmpPrint+0x4>
 8000c10:	20001870 	.word	0x20001870
 8000c14:	20001872 	.word	0x20001872
 8000c18:	20001a60 	.word	0x20001a60
 8000c1c:	e000ed04 	.word	0xe000ed04

08000c20 <bnoMagPrint>:

	}

}

void bnoMagPrint(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

	//uint8_t msg[9] = "Task one\n";
	while(1) {
		if(bnoMagBuf.sent == true) {
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <bnoMagPrint+0x48>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d117      	bne.n	8000c5e <bnoMagPrint+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2e:	b672      	cpsid	i
}
 8000c30:	bf00      	nop
			__disable_irq();
			HAL_UART_Transmit(&huart1,bnoMagBuf.msg,bnoMagBuf.bufLen,100);
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <bnoMagPrint+0x48>)
 8000c34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	490b      	ldr	r1, [pc, #44]	; (8000c6c <bnoMagPrint+0x4c>)
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <bnoMagPrint+0x50>)
 8000c40:	f003 fa62 	bl	8004108 <HAL_UART_Transmit>
			bnoMagBuf.bufLen = 0;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <bnoMagPrint+0x48>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			bnoMagBuf.sent = false;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <bnoMagPrint+0x48>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c52:	b662      	cpsie	i
}
 8000c54:	bf00      	nop
			__enable_irq();
			delayTask(500);
 8000c56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5a:	f000 f865 	bl	8000d28 <delayTask>
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <bnoMagPrint+0x54>)
 8000c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c64:	601a      	str	r2, [r3, #0]
		if(bnoMagBuf.sent == true) {
 8000c66:	e7dd      	b.n	8000c24 <bnoMagPrint+0x4>
 8000c68:	20001ae4 	.word	0x20001ae4
 8000c6c:	20001ae6 	.word	0x20001ae6
 8000c70:	20001a60 	.word	0x20001a60
 8000c74:	e000ed04 	.word	0xe000ed04

08000c78 <bnoAccelPrint>:

	}

}

void bnoAccelPrint(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	//uint8_t msg[9] = "Task one\n";
	while(1) {
		if(bnoAccelBuf.sent == true) {
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <bnoAccelPrint+0x48>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d117      	bne.n	8000cb6 <bnoAccelPrint+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
}
 8000c88:	bf00      	nop
			__disable_irq();
			HAL_UART_Transmit(&huart1,bnoAccelBuf.msg,bnoAccelBuf.bufLen,100);
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <bnoAccelPrint+0x48>)
 8000c8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	490b      	ldr	r1, [pc, #44]	; (8000cc4 <bnoAccelPrint+0x4c>)
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <bnoAccelPrint+0x50>)
 8000c98:	f003 fa36 	bl	8004108 <HAL_UART_Transmit>
			bnoAccelBuf.bufLen = 0;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <bnoAccelPrint+0x48>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			bnoAccelBuf.sent = false;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <bnoAccelPrint+0x48>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000caa:	b662      	cpsie	i
}
 8000cac:	bf00      	nop
			__enable_irq();
			delayTask(500);
 8000cae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb2:	f000 f839 	bl	8000d28 <delayTask>
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <bnoAccelPrint+0x54>)
 8000cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cbc:	601a      	str	r2, [r3, #0]
		if(bnoAccelBuf.sent == true) {
 8000cbe:	e7dd      	b.n	8000c7c <bnoAccelPrint+0x4>
 8000cc0:	20001bb4 	.word	0x20001bb4
 8000cc4:	20001bb6 	.word	0x20001bb6
 8000cc8:	20001a60 	.word	0x20001a60
 8000ccc:	e000ed04 	.word	0xe000ed04

08000cd0 <bnoGyroPrint>:

	}

}

void bnoGyroPrint(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	while(1) {
		if(bnoGyroBuf.sent == true) {
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <bnoGyroPrint+0x48>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d117      	bne.n	8000d0e <bnoGyroPrint+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cde:	b672      	cpsid	i
}
 8000ce0:	bf00      	nop
			__disable_irq();
			HAL_UART_Transmit(&huart1,bnoGyroBuf.msg,bnoGyroBuf.bufLen,100);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <bnoGyroPrint+0x48>)
 8000ce4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	490b      	ldr	r1, [pc, #44]	; (8000d1c <bnoGyroPrint+0x4c>)
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <bnoGyroPrint+0x50>)
 8000cf0:	f003 fa0a 	bl	8004108 <HAL_UART_Transmit>
			bnoGyroBuf.bufLen = 0;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <bnoGyroPrint+0x48>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			bnoGyroBuf.sent = false;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <bnoGyroPrint+0x48>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d02:	b662      	cpsie	i
}
 8000d04:	bf00      	nop
			__enable_irq();
			delayTask(500);
 8000d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0a:	f000 f80d 	bl	8000d28 <delayTask>
		}
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <bnoGyroPrint+0x54>)
 8000d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d14:	601a      	str	r2, [r3, #0]
		if(bnoGyroBuf.sent == true) {
 8000d16:	e7dd      	b.n	8000cd4 <bnoGyroPrint+0x4>
 8000d18:	20001990 	.word	0x20001990
 8000d1c:	20001992 	.word	0x20001992
 8000d20:	20001a60 	.word	0x20001a60
 8000d24:	e000ed04 	.word	0xe000ed04

08000d28 <delayTask>:

	}
}

void delayTask(int delay) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	__asm volatile (
 8000d30:	f3ef 8009 	mrs	r0, PSP
			"mrs r0, psp \n"
	);
	currentProcess->delay = delay;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <delayTask+0x48>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	currentProcess->currentState = BLOCKED;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <delayTask+0x48>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2202      	movs	r2, #2
 8000d44:	711a      	strb	r2, [r3, #4]
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <delayTask+0x4c>)
 8000d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4c:	601a      	str	r2, [r3, #0]
	while(currentProcess->currentState == BLOCKED) {
 8000d4e:	bf00      	nop
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <delayTask+0x48>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d0fa      	beq.n	8000d50 <delayTask+0x28>

	}
	__asm volatile (
 8000d5a:	300c      	adds	r0, #12
 8000d5c:	f380 8809 	msr	PSP, r0
 8000d60:	4770      	bx	lr
			"adds r0, #12 \n"
			"msr psp, r0 \n"
			"bx lr \n"
	);

}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000198c 	.word	0x2000198c
 8000d74:	e000ed04 	.word	0xe000ed04

08000d78 <initTasks>:

void initTasks(void) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_PROC; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	e01d      	b.n	8000dc0 <initTasks+0x48>
		processes[i].stackTop = &processes[i].stack[STACK_SIZE - 17];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <initialContext+0x10>)
 8000d94:	441a      	add	r2, r3
 8000d96:	4914      	ldr	r1, [pc, #80]	; (8000de8 <initialContext+0x10>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f44f 7019 	mov.w	r0, #612	; 0x264
 8000d9e:	fb00 f303 	mul.w	r3, r0, r3
 8000da2:	440b      	add	r3, r1
 8000da4:	601a      	str	r2, [r3, #0]
		processes[i].currentState = TERMINATED;
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <initialContext+0x10>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	3304      	adds	r3, #4
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_PROC; i++) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	ddde      	ble.n	8000d84 <initTasks+0xc>
	}
	currentProcess = &processes[NUM_PROC-1];
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <initialContext+0x14>)
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <initialContext+0x18>)
 8000dca:	601a      	str	r2, [r3, #0]
	__asm volatile (
 8000dcc:	f8df 3008 	ldr.w	r3, [pc, #8]	; 8000dd8 <initialContext>
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	6801      	ldr	r1, [r0, #0]
 8000dd4:	f381 8809 	msr	PSP, r1

08000dd8 <initialContext>:
 8000dd8:	2000198c 	.word	0x2000198c
			"ldr r0, [r3] \n"
			"ldr r1, [r0] \n"
			"msr psp, r1 \n"
			"initialContext: .word currentProcess \n"
	);
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	20000088 	.word	0x20000088
 8000dec:	2000198c 	.word	0x2000198c
 8000df0:	2000160c 	.word	0x2000160c

08000df4 <addTask>:
void addTask(void* task) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_PROC; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e02f      	b.n	8000e62 <addTask+0x6e>
		if(processes[i].currentState == TERMINATED) {
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <addTask+0x80>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	3304      	adds	r3, #4
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d121      	bne.n	8000e5c <addTask+0x68>
			*(uint32_t*)(&processes[i].stack[STACK_SIZE - 2]) = (uint32_t)task;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <addTask+0x80>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
			*(uint32_t*)(&processes[i].stack[STACK_SIZE - 1]) = (uint32_t)0x21000000;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <addTask+0x80>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	f04f 5204 	mov.w	r2, #553648128	; 0x21000000
 8000e44:	601a      	str	r2, [r3, #0]
			processes[i].currentState = ACTIVE;
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <addTask+0x80>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			return;
 8000e5a:	e005      	b.n	8000e68 <addTask+0x74>
	for(int i = 0; i < NUM_PROC; i++) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	ddcc      	ble.n	8000e02 <addTask+0xe>
		}
	}
}
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000088 	.word	0x20000088

08000e78 <schedule>:

void schedule(void) {
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	static int i = 0;
	for(;;) {
		i = (i + 1) % NUM_PROC;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <schedule+0x5c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1c59      	adds	r1, r3, #1
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <schedule+0x60>)
 8000e84:	fb83 2301 	smull	r2, r3, r3, r1
 8000e88:	109a      	asrs	r2, r3, #2
 8000e8a:	17cb      	asrs	r3, r1, #31
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	1aca      	subs	r2, r1, r3
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <schedule+0x5c>)
 8000e9a:	601a      	str	r2, [r3, #0]
		if(processes[i].currentState == ACTIVE) {
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <schedule+0x5c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <schedule+0x64>)
 8000ea2:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000ea6:	fb01 f303 	mul.w	r3, r1, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	3304      	adds	r3, #4
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e3      	bne.n	8000e7c <schedule+0x4>
			currentProcess = &processes[i];
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <schedule+0x5c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <schedule+0x64>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <schedule+0x68>)
 8000ec6:	6013      	str	r3, [r2, #0]
			return;
 8000ec8:	bf00      	nop
		}
	}
	//uint8_t msg[11] = "Scheduling";
	//HAL_UART_Transmit(&huart1,msg,11,100);
}
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000038 	.word	0x20000038
 8000ed8:	66666667 	.word	0x66666667
 8000edc:	20000088 	.word	0x20000088
 8000ee0:	2000198c 	.word	0x2000198c

08000ee4 <PendSV_Handler>:


void PendSV_Handler(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	//__disable_irq();

	__asm volatile
 8000ee8:	f3ef 8008 	mrs	r0, MSP
 8000eec:	f04f 0108 	mov.w	r1, #8
 8000ef0:	4408      	add	r0, r1
 8000ef2:	f380 8808 	msr	MSP, r0
 8000ef6:	f3ef 8009 	mrs	r0, PSP
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <currentContext>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f02:	6010      	str	r0, [r2, #0]
			"ldr r3, currentContext \n"
			"ldr r2, [r3] \n"
			"stmdb r0!, {r4-r11, r14} \n"
			"str r0, [r2] \n"
	);
	schedule();
 8000f04:	f7ff ffb8 	bl	8000e78 <schedule>
	//__enable_irq();

	__asm volatile
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <currentContext>)
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	6808      	ldr	r0, [r1, #0]
 8000f0e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f12:	f380 8809 	msr	PSP, r0
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f06f 0e02 	mvn.w	lr, #2
 8000f1e:	4770      	bx	lr

08000f20 <currentContext>:
 8000f20:	2000198c 	.word	0x2000198c
			"bx lr \n"
			"currentContext: .word currentProcess \n"
	);
	//return;
	//portNVIC_INT_CTRL_REG = portNVIC_Thread;
	__asm volatile
 8000f24:	4770      	bx	lr
	(
			"bx r14 \n"
	);

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f32:	f000 fb57 	bl	80015e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f36:	f000 f87b 	bl	8001030 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f3a:	f000 f98b 	bl	8001254 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f3e:	f000 f959 	bl	80011f4 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000f42:	f000 f8c9 	bl	80010d8 <MX_I2C1_Init>
	MX_TIM3_Init();
 8000f46:	f000 f907 	bl	8001158 <MX_TIM3_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4a:	b672      	cpsid	i
}
 8000f4c:	bf00      	nop
	/* USER CODE BEGIN 2 */
	__disable_irq();
	initTasks();
 8000f4e:	f7ff ff13 	bl	8000d78 <initTasks>
	bnoAccelBuf.sent = false;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <main+0xd0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
	bnoGyroBuf.sent = false;
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <main+0xd4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
	bmpBuf.sent = false;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <main+0xd8>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	bnoMagBuf.sent = false;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <main+0xdc>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
	uint8_t msg = 0x10;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,BNO_ADDR,0x3B,1,&msg,1,100);
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	223b      	movs	r2, #59	; 0x3b
 8000f7e:	2150      	movs	r1, #80	; 0x50
 8000f80:	4822      	ldr	r0, [pc, #136]	; (800100c <main+0xe0>)
 8000f82:	f000 fe7d 	bl	8001c80 <HAL_I2C_Mem_Write>
	msg = 0x08;
 8000f86:	2308      	movs	r3, #8
 8000f88:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,BNO_ADDR,0x3D,1,&msg,1,100);
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	223d      	movs	r2, #61	; 0x3d
 8000f9a:	2150      	movs	r1, #80	; 0x50
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <main+0xe0>)
 8000f9e:	f000 fe6f 	bl	8001c80 <HAL_I2C_Mem_Write>
	msg = 0x27;
 8000fa2:	2327      	movs	r3, #39	; 0x27
 8000fa4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,BMP_ADDR,0xF4,1,&msg,1,100);
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	22f4      	movs	r2, #244	; 0xf4
 8000fb6:	21ee      	movs	r1, #238	; 0xee
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <main+0xe0>)
 8000fba:	f000 fe61 	bl	8001c80 <HAL_I2C_Mem_Write>
	addTask(&bnoGyroPrint);
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <main+0xe4>)
 8000fc0:	f7ff ff18 	bl	8000df4 <addTask>
	addTask(&bnoAccelPrint);
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <main+0xe8>)
 8000fc6:	f7ff ff15 	bl	8000df4 <addTask>
	addTask(&bnoMagPrint);
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <main+0xec>)
 8000fcc:	f7ff ff12 	bl	8000df4 <addTask>
	addTask(&bmpPrint);
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <main+0xf0>)
 8000fd2:	f7ff ff0f 	bl	8000df4 <addTask>
	addTask(&readBNOGyro);
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <main+0xf4>)
 8000fd8:	f7ff ff0c 	bl	8000df4 <addTask>
	addTask(&readBNOAccel);
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <main+0xf8>)
 8000fde:	f7ff ff09 	bl	8000df4 <addTask>
	addTask(&readBNOMag);
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <main+0xfc>)
 8000fe4:	f7ff ff06 	bl	8000df4 <addTask>
	addTask(&readBMP);
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <main+0x100>)
 8000fea:	f7ff ff03 	bl	8000df4 <addTask>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fee:	b662      	cpsie	i
}
 8000ff0:	bf00      	nop
	__enable_irq();
	HAL_InitTick(0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fb0c 	bl	8001610 <HAL_InitTick>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0xcc>
 8000ffa:	bf00      	nop
 8000ffc:	20001bb4 	.word	0x20001bb4
 8001000:	20001990 	.word	0x20001990
 8001004:	20001870 	.word	0x20001870
 8001008:	20001ae4 	.word	0x20001ae4
 800100c:	2000003c 	.word	0x2000003c
 8001010:	08000cd1 	.word	0x08000cd1
 8001014:	08000c79 	.word	0x08000c79
 8001018:	08000c21 	.word	0x08000c21
 800101c:	08000bc9 	.word	0x08000bc9
 8001020:	08000a05 	.word	0x08000a05
 8001024:	08000679 	.word	0x08000679
 8001028:	0800083d 	.word	0x0800083d
 800102c:	0800043d 	.word	0x0800043d

08001030 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fc00 	bl	8004844 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001078:	4618      	mov	r0, r3
 800107a:	f001 faf3 	bl	8002664 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8001084:	f000 f92e 	bl	80012e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 f9e6 	bl	8003474 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80010ae:	f000 f919 	bl	80012e4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80010b2:	2321      	movs	r3, #33	; 0x21
 80010b4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fc0d 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 80010cc:	f000 f90a 	bl	80012e4 <Error_Handler>
	}
}
 80010d0:	bf00      	nop
 80010d2:	3758      	adds	r7, #88	; 0x58
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C1_Init+0x74>)
 8001114:	f000 fd24 	bl	8001b60 <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800111e:	f000 f8e1 	bl	80012e4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C1_Init+0x74>)
 8001126:	f001 fa05 	bl	8002534 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001130:	f000 f8d8 	bl	80012e4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C1_Init+0x74>)
 8001138:	f001 fa47 	bl	80025ca <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001142:	f000 f8cf 	bl	80012e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000003c 	.word	0x2000003c
 8001150:	40005400 	.word	0x40005400
 8001154:	2000090e 	.word	0x2000090e

08001158 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM3_Init+0x94>)
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <MX_TIM3_Init+0x98>)
 800117a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM3_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 8000;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM3_Init+0x94>)
 800118a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800118e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM3_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM3_Init+0x94>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_TIM3_Init+0x94>)
 800119e:	f002 fcc5 	bl	8003b2c <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80011a8:	f000 f89c 	bl	80012e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM3_Init+0x94>)
 80011ba:	f002 fd0e 	bl	8003bda <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 80011c4:	f000 f88e 	bl	80012e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM3_Init+0x94>)
 80011d6:	f002 fedb 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 80011e0:	f000 f880 	bl	80012e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001940 	.word	0x20001940
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_USART1_UART_Init+0x58>)
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <MX_USART1_UART_Init+0x5c>)
 80011fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 19200;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001200:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001204:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_USART1_UART_Init+0x58>)
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_USART1_UART_Init+0x58>)
 800121c:	220c      	movs	r2, #12
 800121e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_USART1_UART_Init+0x58>)
 800123a:	f002 ff17 	bl	800406c <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x54>
	{
		Error_Handler();
 8001244:	f000 f84e 	bl	80012e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20001a60 	.word	0x20001a60
 8001250:	40013800 	.word	0x40013800

08001254 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_GPIO_Init+0x8c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_GPIO_Init+0x8c>)
 8001270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_GPIO_Init+0x8c>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_GPIO_Init+0x8c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <MX_GPIO_Init+0x8c>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_GPIO_Init+0x8c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_GPIO_Init+0x8c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <MX_GPIO_Init+0x8c>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x8c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80012b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80012b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c4:	2307      	movs	r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f000 fad3 	bl	800187c <HAL_GPIO_Init>

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_MspInit+0x4c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_MspInit+0x4c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_MspInit+0x4c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	210f      	movs	r1, #15
 800132a:	f06f 0001 	mvn.w	r0, #1
 800132e:	f000 fa7c 	bl	800182a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_I2C_MspInit+0x7c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d127      	bne.n	80013b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800138a:	2304      	movs	r3, #4
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <HAL_I2C_MspInit+0x84>)
 8001396:	f000 fa71 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 80013a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_I2C_MspInit+0x80>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10b      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40000400 	.word	0x40000400
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_UART_MspInit+0x80>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d129      	bne.n	800147e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_UART_MspInit+0x84>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_UART_MspInit+0x84>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_UART_MspInit+0x84>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_UART_MspInit+0x84>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_UART_MspInit+0x84>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_UART_MspInit+0x84>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800145a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800146c:	2307      	movs	r3, #7
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f000 f9ff 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40013800 	.word	0x40013800
 800148c:	40021000 	.word	0x40021000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <SysTick_Handler+0x98>)
 80014d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014d8:	601a      	str	r2, [r3, #0]

	for(int j = 0; j < NUM_PROC; j++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e038      	b.n	8001552 <SysTick_Handler+0x86>
		if(processes[j].currentState == BLOCKED) {
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <SysTick_Handler+0x9c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f44f 7119 	mov.w	r1, #612	; 0x264
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3304      	adds	r3, #4
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d12a      	bne.n	800154c <SysTick_Handler+0x80>
		  	processes[j].delay--;
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <SysTick_Handler+0x9c>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f44f 7119 	mov.w	r1, #612	; 0x264
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	4916      	ldr	r1, [pc, #88]	; (8001568 <SysTick_Handler+0x9c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f44f 7019 	mov.w	r0, #612	; 0x264
 8001514:	fb00 f303 	mul.w	r3, r0, r3
 8001518:	440b      	add	r3, r1
 800151a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800151e:	601a      	str	r2, [r3, #0]
			if(processes[j].delay == 0) {
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <SysTick_Handler+0x9c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d109      	bne.n	800154c <SysTick_Handler+0x80>
		  		processes[j].currentState = ACTIVE;
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <SysTick_Handler+0x9c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_PROC; j++) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3301      	adds	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddc3      	ble.n	80014e0 <SysTick_Handler+0x14>
		}
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f88a 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	e000ed04 	.word	0xe000ed04
 8001568:	20000088 	.word	0x20000088

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ac:	4c0b      	ldr	r4, [pc, #44]	; (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ba:	f7ff ffd7 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f003 f91d 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff fcb3 	bl	8000f2c <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015d4:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 80015d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015dc:	20001c88 	.word	0x20001c88

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x28>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f90d 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fe76 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f917 	bl	8001862 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f8ed 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20001c84 	.word	0x20001c84

08001698 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;  
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20001c84 	.word	0x20001c84

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff47 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5c 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e14e      	b.n	8001b2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8140 	beq.w	8001b24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809a 	beq.w	8001b24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d013      	beq.n	8001a5c <HAL_GPIO_Init+0x1e0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <HAL_GPIO_Init+0x2d4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00d      	beq.n	8001a58 <HAL_GPIO_Init+0x1dc>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a45      	ldr	r2, [pc, #276]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1d8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_GPIO_Init+0x1d4>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a50:	2305      	movs	r3, #5
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6e:	4937      	ldr	r1, [pc, #220]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f aea9 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	48000400 	.word	0x48000400
 8001b54:	48000800 	.word	0x48000800
 8001b58:	48000c00 	.word	0x48000c00
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e081      	b.n	8001c76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fbda 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	; 0x24
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d104      	bne.n	8001bfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69d9      	ldr	r1, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	817b      	strh	r3, [r7, #10]
 8001c92:	460b      	mov	r3, r1
 8001c94:	813b      	strh	r3, [r7, #8]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	f040 80f9 	bne.w	8001e9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x34>
 8001cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0ed      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Mem_Write+0x4e>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e0e6      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd6:	f7ff fcdf 	bl	8001698 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2319      	movs	r3, #25
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fac3 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0d1      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2221      	movs	r2, #33	; 0x21
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a3a      	ldr	r2, [r7, #32]
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d20:	88f8      	ldrh	r0, [r7, #6]
 8001d22:	893a      	ldrh	r2, [r7, #8]
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f9d3 	bl	80020dc <I2C_RequestMemoryWrite>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0a9      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d90e      	bls.n	8001d70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	22ff      	movs	r2, #255	; 0xff
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 fbb5 	bl	80024d8 <I2C_TransferConfig>
 8001d6e:	e00f      	b.n	8001d90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	8979      	ldrh	r1, [r7, #10]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fba4 	bl	80024d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 faad 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e07b      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d034      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x1c8>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d130      	bne.n	8001e48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	2200      	movs	r2, #0
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fa3f 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e04d      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d90e      	bls.n	8001e28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22ff      	movs	r2, #255	; 0xff
 8001e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	8979      	ldrh	r1, [r7, #10]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fb59 	bl	80024d8 <I2C_TransferConfig>
 8001e26:	e00f      	b.n	8001e48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	8979      	ldrh	r1, [r7, #10]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fb48 	bl	80024d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d19e      	bne.n	8001d90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa8c 	bl	8002374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e01a      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_I2C_Mem_Write+0x224>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	fe00e800 	.word	0xfe00e800

08001ea8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	817b      	strh	r3, [r7, #10]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	813b      	strh	r3, [r7, #8]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	f040 80fd 	bne.w	80020ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_I2C_Mem_Read+0x34>
 8001ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0f1      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x4e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0ea      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001efe:	f7ff fbcb 	bl	8001698 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2319      	movs	r3, #25
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f9af 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d5      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2222      	movs	r2, #34	; 0x22
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a3a      	ldr	r2, [r7, #32]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f48:	88f8      	ldrh	r0, [r7, #6]
 8001f4a:	893a      	ldrh	r2, [r7, #8]
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4603      	mov	r3, r0
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f913 	bl	8002184 <I2C_RequestMemoryRead>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ad      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2bff      	cmp	r3, #255	; 0xff
 8001f78:	d90e      	bls.n	8001f98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <HAL_I2C_Mem_Read+0x22c>)
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 faa1 	bl	80024d8 <I2C_TransferConfig>
 8001f96:	e00f      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_I2C_Mem_Read+0x22c>)
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa90 	bl	80024d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f956 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07c      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d034      	beq.n	8002078 <HAL_I2C_Mem_Read+0x1d0>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b00      	cmp	r3, #0
 8002014:	d130      	bne.n	8002078 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	2200      	movs	r2, #0
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f927 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e04d      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d90e      	bls.n	8002058 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	22ff      	movs	r2, #255	; 0xff
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	b2da      	uxtb	r2, r3
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	2300      	movs	r3, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fa41 	bl	80024d8 <I2C_TransferConfig>
 8002056:	e00f      	b.n	8002078 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	b2da      	uxtb	r2, r3
 8002068:	8979      	ldrh	r1, [r7, #10]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fa30 	bl	80024d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d19a      	bne.n	8001fb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f974 	bl	8002374 <I2C_WaitOnSTOPFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e01a      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2220      	movs	r2, #32
 800209c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_I2C_Mem_Read+0x230>)
 80020aa:	400b      	ands	r3, r1
 80020ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
  }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	80002400 	.word	0x80002400
 80020d8:	fe00e800 	.word	0xfe00e800

080020dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	8979      	ldrh	r1, [r7, #10]
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <I2C_RequestMemoryWrite+0xa4>)
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f9e7 	bl	80024d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	69b9      	ldr	r1, [r7, #24]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8f0 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e02c      	b.n	8002178 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002124:	893b      	ldrh	r3, [r7, #8]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
 800212e:	e015      	b.n	800215c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f8d6 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e012      	b.n	8002178 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002152:	893b      	ldrh	r3, [r7, #8]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f884 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	80002000 	.word	0x80002000

08002184 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	8979      	ldrh	r1, [r7, #10]
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <I2C_RequestMemoryRead+0xa4>)
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f994 	bl	80024d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f89d 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e02c      	b.n	800221e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
 80021d4:	e015      	b.n	8002202 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021d6:	893b      	ldrh	r3, [r7, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f883 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e012      	b.n	800221e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2200      	movs	r2, #0
 800220a:	2140      	movs	r1, #64	; 0x40
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f831 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	80002000 	.word	0x80002000

0800222c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d103      	bne.n	800224a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d007      	beq.n	8002268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	619a      	str	r2, [r3, #24]
  }
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002284:	e022      	b.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d01e      	beq.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7ff fa03 	bl	8001698 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d113      	bne.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e00f      	b.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4013      	ands	r3, r2
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d0cd      	beq.n	8002286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002300:	e02c      	b.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f870 	bl	80023ec <I2C_IsAcknowledgeFailed>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e02a      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d01e      	beq.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7ff f9bb 	bl	8001698 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d1cb      	bne.n	8002302 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002380:	e028      	b.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f830 	bl	80023ec <I2C_IsAcknowledgeFailed>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e026      	b.n	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f97f 	bl	8001698 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d113      	bne.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e007      	b.n	80023e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d1cf      	bne.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b10      	cmp	r3, #16
 8002404:	d161      	bne.n	80024ca <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002414:	d02b      	beq.n	800246e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002424:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002426:	e022      	b.n	800246e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d01e      	beq.n	800246e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002430:	f7ff f932 	bl	8001698 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d302      	bcc.n	8002446 <I2C_IsAcknowledgeFailed+0x5a>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d113      	bne.n	800246e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02e      	b.n	80024cc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1d5      	bne.n	8002428 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff fecd 	bl	800222c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <I2C_IsAcknowledgeFailed+0xe8>)
 800249e:	400b      	ands	r3, r1
 80024a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	fe00e800 	.word	0xfe00e800

080024d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	4613      	mov	r3, r2
 80024e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	0d5b      	lsrs	r3, r3, #21
 80024f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <I2C_TransferConfig+0x58>)
 80024fa:	430b      	orrs	r3, r1
 80024fc:	43db      	mvns	r3, r3
 80024fe:	ea02 0103 	and.w	r1, r2, r3
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002508:	7a7b      	ldrb	r3, [r7, #9]
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	431a      	orrs	r2, r3
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	03ff63ff 	.word	0x03ff63ff

08002534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	d138      	bne.n	80025bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e032      	b.n	80025be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d139      	bne.n	8002654 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e033      	b.n	8002656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2224      	movs	r2, #36	; 0x24
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800261c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800266a:	af00      	add	r7, sp, #0
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f000 bef4 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 816a 	beq.w	8002962 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800268e:	4bb3      	ldr	r3, [pc, #716]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800269a:	4bb0      	ldr	r3, [pc, #704]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d159      	bne.n	800275a <HAL_RCC_OscConfig+0xf6>
 80026a6:	4bad      	ldr	r3, [pc, #692]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d152      	bne.n	800275a <HAL_RCC_OscConfig+0xf6>
 80026b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d102      	bne.n	80026e6 <HAL_RCC_OscConfig+0x82>
 80026e0:	4b9e      	ldr	r3, [pc, #632]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0xae>
 80026e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002702:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800270e:	4b93      	ldr	r3, [pc, #588]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002716:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800271a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800271e:	fa92 f2a2 	rbit	r2, r2
 8002722:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002726:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f042 0220 	orr.w	r2, r2, #32
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f002 021f 	and.w	r2, r2, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 810c 	beq.w	8002960 <HAL_RCC_OscConfig+0x2fc>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 8106 	bne.w	8002960 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f000 be86 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x110>
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7c      	ldr	r2, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e030      	b.n	80027d6 <HAL_RCC_OscConfig+0x172>
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x134>
 800277e:	4b77      	ldr	r3, [pc, #476]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a76      	ldr	r2, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b74      	ldr	r3, [pc, #464]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a73      	ldr	r2, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01e      	b.n	80027d6 <HAL_RCC_OscConfig+0x172>
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x15a>
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6c      	ldr	r2, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0x172>
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b64      	ldr	r3, [pc, #400]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a63      	ldr	r2, [pc, #396]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f023 020f 	bic.w	r2, r3, #15
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	495d      	ldr	r1, [pc, #372]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d059      	beq.n	80028a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe ff50 	bl	8001698 <HAL_GetTick>
 80027f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fe:	f7fe ff4b 	bl	8001698 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d902      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	f000 be29 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002828:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x1e2>
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	e015      	b.n	8002872 <HAL_RCC_OscConfig+0x20e>
 8002846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800285a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800285e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002862:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002876:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800287a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002886:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800288a:	fab2 f282 	clz	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f002 021f 	and.w	r2, r2, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ab      	beq.n	80027fe <HAL_RCC_OscConfig+0x19a>
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fef6 	bl	8001698 <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b2:	f7fe fef1 	bl	8001698 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d902      	bls.n	80028c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	f000 bdcf 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
 80028c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0x296>
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x2c2>
 80028fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002916:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_RCC_OscConfig+0x2f8>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800292a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800292e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002932:	fa92 f2a2 	rbit	r2, r2
 8002936:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800293a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f002 021f 	and.w	r2, r2, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ab      	bne.n	80028b2 <HAL_RCC_OscConfig+0x24e>
 800295a:	e002      	b.n	8002962 <HAL_RCC_OscConfig+0x2fe>
 800295c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 816f 	beq.w	8002c50 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002972:	4bd0      	ldr	r3, [pc, #832]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800297e:	4bcd      	ldr	r3, [pc, #820]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d16c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x400>
 800298a:	4bca      	ldr	r3, [pc, #808]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d166      	bne.n	8002a64 <HAL_RCC_OscConfig+0x400>
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x362>
 80029c0:	4bbc      	ldr	r3, [pc, #752]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e013      	b.n	80029ee <HAL_RCC_OscConfig+0x38a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029ea:	4bb2      	ldr	r3, [pc, #712]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2202      	movs	r2, #2
 80029f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a00:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_RCC_OscConfig+0x3cc>
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f000 bd1b 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4ba0      	ldr	r3, [pc, #640]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	21f8      	movs	r1, #248	; 0xf8
 8002a40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a48:	fa91 f1a1 	rbit	r1, r1
 8002a4c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a50:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a54:	fab1 f181 	clz	r1, r1
 8002a58:	b2c9      	uxtb	r1, r1
 8002a5a:	408b      	lsls	r3, r1
 8002a5c:	4995      	ldr	r1, [pc, #596]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e0f5      	b.n	8002c50 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8085 	beq.w	8002b7a <HAL_RCC_OscConfig+0x516>
 8002a70:	2301      	movs	r3, #1
 8002a72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fdfc 	bl	8001698 <HAL_GetTick>
 8002aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fdf7 	bl	8001698 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f000 bcd5 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ace:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_OscConfig+0x488>
 8002ae6:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e013      	b.n	8002b14 <HAL_RCC_OscConfig+0x4b0>
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002afe:	2302      	movs	r3, #2
 8002b00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2202      	movs	r2, #2
 8002b16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b2a:	fab2 f282 	clz	r2, r2
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0af      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	21f8      	movs	r1, #248	; 0xf8
 8002b56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b5e:	fa91 f1a1 	rbit	r1, r1
 8002b62:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b66:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b6a:	fab1 f181 	clz	r1, r1
 8002b6e:	b2c9      	uxtb	r1, r1
 8002b70:	408b      	lsls	r3, r1
 8002b72:	4950      	ldr	r1, [pc, #320]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e06a      	b.n	8002c50 <HAL_RCC_OscConfig+0x5ec>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fd77 	bl	8001698 <HAL_GetTick>
 8002baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fd72 	bl	8001698 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d902      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f000 bc50 	b.w	8003466 <HAL_RCC_OscConfig+0xe02>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x592>
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e013      	b.n	8002c1e <HAL_RCC_OscConfig+0x5ba>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x650>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c24:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c28:	fa92 f2a2 	rbit	r2, r2
 8002c2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1af      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80da 	beq.w	8002e14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d069      	beq.n	8002d3e <HAL_RCC_OscConfig+0x6da>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x654>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fd00 	bl	8001698 <HAL_GetTick>
 8002c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	e00e      	b.n	8002cbc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fcfb 	bl	8001698 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d906      	bls.n	8002cbc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e3d9      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	10908120 	.word	0x10908120
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4ba5      	ldr	r3, [pc, #660]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d06:	2102      	movs	r1, #2
 8002d08:	6019      	str	r1, [r3, #0]
 8002d0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f1a3 	rbit	r1, r3
 8002d14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d18:	6019      	str	r1, [r3, #0]
  return result;
 8002d1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0b0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x63a>
 8002d3c:	e06a      	b.n	8002e14 <HAL_RCC_OscConfig+0x7b0>
 8002d3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d54:	601a      	str	r2, [r3, #0]
  return result;
 8002d56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x934>)
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fc92 	bl	8001698 <HAL_GetTick>
 8002d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fc8d 	bl	8001698 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e36b      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 8002d8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d92:	2202      	movs	r2, #2
 8002d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002daa:	2202      	movs	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd6:	4b6f      	ldr	r3, [pc, #444]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dde:	2102      	movs	r1, #2
 8002de0:	6019      	str	r1, [r3, #0]
 8002de2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f1a3 	rbit	r1, r3
 8002dec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002df0:	6019      	str	r1, [r3, #0]
  return result;
 8002df2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1b2      	bne.n	8002d7a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8158 	beq.w	80030d4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <HAL_RCC_OscConfig+0x938>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11a      	bne.n	8002e9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e68:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <HAL_RCC_OscConfig+0x938>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_RCC_OscConfig+0x938>)
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e74:	f7fe fc10 	bl	8001698 <HAL_GetTick>
 8002e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e009      	b.n	8002e92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fc0b 	bl	8001698 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e2e9      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_RCC_OscConfig+0x938>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x852>
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0x8b2>
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x876>
 8002ec0:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e01d      	b.n	8002f16 <HAL_RCC_OscConfig+0x8b2>
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x89a>
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0x8b2>
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d06b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7fe fbba 	bl	8001698 <HAL_GetTick>
 8002f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fbb5 	bl	8001698 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e291      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 8002f42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f46:	2202      	movs	r2, #2
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f70:	601a      	str	r2, [r3, #0]
  return result;
 8002f72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x93c>
 8002f8c:	4b01      	ldr	r3, [pc, #4]	; (8002f94 <HAL_RCC_OscConfig+0x930>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	e014      	b.n	8002fbc <HAL_RCC_OscConfig+0x958>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	10908120 	.word	0x10908120
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	4bbb      	ldr	r3, [pc, #748]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6011      	str	r1, [r2, #0]
 8002fc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	fa92 f1a2 	rbit	r1, r2
 8002fce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fd2:	6011      	str	r1, [r2, #0]
  return result;
 8002fd4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	fab2 f282 	clz	r2, r2
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	f002 021f 	and.w	r2, r2, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d099      	beq.n	8002f2a <HAL_RCC_OscConfig+0x8c6>
 8002ff6:	e063      	b.n	80030c0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fb4e 	bl	8001698 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fb49 	bl	8001698 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e225      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 800301a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800304e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d102      	bne.n	800306a <HAL_RCC_OscConfig+0xa06>
 8003064:	4b90      	ldr	r3, [pc, #576]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	e00d      	b.n	8003086 <HAL_RCC_OscConfig+0xa22>
 800306a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800306e:	2202      	movs	r2, #2
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800308a:	2102      	movs	r1, #2
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	fa92 f1a2 	rbit	r1, r2
 8003098:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800309c:	6011      	str	r1, [r2, #0]
  return result;
 800309e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1a0      	bne.n	8003002 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b77      	ldr	r3, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4a76      	ldr	r2, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 81c2 	beq.w	8003464 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e0:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f000 819c 	beq.w	8003426 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f040 8114 	bne.w	8003322 <HAL_RCC_OscConfig+0xcbe>
 80030fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003112:	601a      	str	r2, [r3, #0]
  return result;
 8003114:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003118:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003124:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fab2 	bl	8001698 <HAL_GetTick>
 8003134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003138:	e009      	b.n	800314e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe faad 	bl	8001698 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e18b      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 800314e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003166:	601a      	str	r2, [r3, #0]
  return result;
 8003168:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800316c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0xb24>
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e01b      	b.n	80031c0 <HAL_RCC_OscConfig+0xb5c>
 8003188:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800318c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	fa93 f2a3 	rbit	r2, r3
 800319c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	fa92 f1a2 	rbit	r1, r2
 80031d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031d8:	6011      	str	r1, [r2, #0]
  return result;
 80031da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f042 0220 	orr.w	r2, r2, #32
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f002 021f 	and.w	r2, r2, #31
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d19e      	bne.n	800313a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	430b      	orrs	r3, r1
 8003212:	4925      	ldr	r1, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800321c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003230:	601a      	str	r2, [r3, #0]
  return result;
 8003232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003236:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	461a      	mov	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fa23 	bl	8001698 <HAL_GetTick>
 8003252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003256:	e009      	b.n	800326c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fa1e 	bl	8001698 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0fc      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 800326c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003284:	601a      	str	r2, [r3, #0]
  return result;
 8003286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800328a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0xc48>
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_RCC_OscConfig+0xc44>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e01e      	b.n	80032e4 <HAL_RCC_OscConfig+0xc80>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_OscConfig+0xe0c>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	fa92 f1a2 	rbit	r1, r2
 80032f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032fc:	6011      	str	r1, [r2, #0]
  return result;
 80032fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	fab2 f282 	clz	r2, r2
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	f042 0220 	orr.w	r2, r2, #32
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f002 021f 	and.w	r2, r2, #31
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d09b      	beq.n	8003258 <HAL_RCC_OscConfig+0xbf4>
 8003320:	e0a0      	b.n	8003464 <HAL_RCC_OscConfig+0xe00>
 8003322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800332a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fa93 f2a3 	rbit	r2, r3
 8003336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800333a:	601a      	str	r2, [r3, #0]
  return result;
 800333c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003340:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800334c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe f99e 	bl	8001698 <HAL_GetTick>
 800335c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003360:	e009      	b.n	8003376 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe f999 	bl	8001698 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e077      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
 8003376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	601a      	str	r2, [r3, #0]
  return result;
 8003390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_OscConfig+0xd4c>
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_RCC_OscConfig+0xe0c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e01b      	b.n	80033e8 <HAL_RCC_OscConfig+0xd84>
 80033b0:	f107 0320 	add.w	r3, r7, #32
 80033b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f107 0320 	add.w	r3, r7, #32
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f107 0318 	add.w	r3, r7, #24
 80033ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f107 0318 	add.w	r3, r7, #24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_OscConfig+0xe0c>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f107 0210 	add.w	r2, r7, #16
 80033ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f0:	6011      	str	r1, [r2, #0]
 80033f2:	f107 0210 	add.w	r2, r7, #16
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	fa92 f1a2 	rbit	r1, r2
 80033fc:	f107 020c 	add.w	r2, r7, #12
 8003400:	6011      	str	r1, [r2, #0]
  return result;
 8003402:	f107 020c 	add.w	r2, r7, #12
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d19e      	bne.n	8003362 <HAL_RCC_OscConfig+0xcfe>
 8003424:	e01e      	b.n	8003464 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e018      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCC_OscConfig+0xe0c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800343c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	429a      	cmp	r2, r3
 800344c:	d108      	bne.n	8003460 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800344e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b09e      	sub	sp, #120	; 0x78
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e162      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b90      	ldr	r3, [pc, #576]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d910      	bls.n	80034bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b8d      	ldr	r3, [pc, #564]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 0207 	bic.w	r2, r3, #7
 80034a2:	498b      	ldr	r1, [pc, #556]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e14a      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	497f      	ldr	r1, [pc, #508]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80dc 	beq.w	80036a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d13c      	bne.n	800356a <HAL_RCC_ClockConfig+0xf6>
 80034f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_RCC_ClockConfig+0xa6>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e00f      	b.n	800353a <HAL_RCC_ClockConfig+0xc6>
 800351a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	667b      	str	r3, [r7, #100]	; 0x64
 8003528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352c:	663b      	str	r3, [r7, #96]	; 0x60
 800352e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003542:	fa92 f2a2 	rbit	r2, r2
 8003546:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d17b      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0f3      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d13c      	bne.n	80035ec <HAL_RCC_ClockConfig+0x178>
 8003572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_ClockConfig+0x128>
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e00f      	b.n	80035bc <HAL_RCC_ClockConfig+0x148>
 800359c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	647b      	str	r3, [r7, #68]	; 0x44
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
 80035b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f042 0220 	orr.w	r2, r2, #32
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f002 021f 	and.w	r2, r2, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d13a      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0b2      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
 80035ec:	2302      	movs	r3, #2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e00d      	b.n	8003630 <HAL_RCC_ClockConfig+0x1bc>
 8003614:	2302      	movs	r3, #2
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2202      	movs	r2, #2
 8003632:	61ba      	str	r2, [r7, #24]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	617a      	str	r2, [r7, #20]
  return result;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e079      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe f812 	bl	8001698 <HAL_GetTick>
 8003674:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe f80e 	bl	8001698 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e061      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_ClockConfig+0x260>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d214      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4906      	ldr	r1, [pc, #24]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e040      	b.n	8003752 <HAL_RCC_ClockConfig+0x2de>
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	491a      	ldr	r1, [pc, #104]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4912      	ldr	r1, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003716:	f000 f829 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_ClockConfig+0x2e8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	22f0      	movs	r2, #240	; 0xf0
 8003726:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	60fa      	str	r2, [r7, #12]
  return result;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	40d3      	lsrs	r3, r2
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x2ec>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	fa21 f303 	lsr.w	r3, r1, r3
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HAL_RCC_ClockConfig+0x2f0>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_ClockConfig+0x2f4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd ff60 	bl	8001610 <HAL_InitTick>
  
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3778      	adds	r7, #120	; 0x78
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	080048a8 	.word	0x080048a8
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b08b      	sub	sp, #44	; 0x2c
 8003770:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x30>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x36>
 800379a:	e03c      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 800379e:	623b      	str	r3, [r7, #32]
      break;
 80037a0:	e03c      	b.n	800381c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	fa92 f2a2 	rbit	r2, r2
 80037b4:	607a      	str	r2, [r7, #4]
  return result;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	40d3      	lsrs	r3, r2
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	220f      	movs	r2, #15
 80037d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	60fa      	str	r2, [r7, #12]
  return result;
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e004      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <HAL_RCC_GetSysClockFreq+0xd0>)
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e002      	b.n	800381c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003818:	623b      	str	r3, [r7, #32]
      break;
 800381a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381c:	6a3b      	ldr	r3, [r7, #32]
}
 800381e:	4618      	mov	r0, r3
 8003820:	372c      	adds	r7, #44	; 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	007a1200 	.word	0x007a1200
 8003834:	080048c0 	.word	0x080048c0
 8003838:	080048d0 	.word	0x080048d0
 800383c:	003d0900 	.word	0x003d0900

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000000 	.word	0x20000000

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800385e:	f7ff ffef 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003862:	4601      	mov	r1, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003870:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	603a      	str	r2, [r7, #0]
  return result;
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	fab2 f282 	clz	r2, r2
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	40d3      	lsrs	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	080048b8 	.word	0x080048b8

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038a2:	f7ff ffcd 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 80038a6:	4601      	mov	r1, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	603a      	str	r2, [r7, #0]
  return result;
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	40d3      	lsrs	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080048b8 	.word	0x080048b8

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b092      	sub	sp, #72	; 0x48
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80cd 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003904:	4b86      	ldr	r3, [pc, #536]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10e      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b83      	ldr	r3, [pc, #524]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a82      	ldr	r2, [pc, #520]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b80      	ldr	r3, [pc, #512]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b7d      	ldr	r3, [pc, #500]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b7a      	ldr	r3, [pc, #488]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a79      	ldr	r2, [pc, #484]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fd fea7 	bl	8001698 <HAL_GetTick>
 800394a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fd fea3 	bl	8001698 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	; 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0db      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d07d      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003986:	429a      	cmp	r2, r3
 8003988:	d076      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	461a      	mov	r2, r3
 80039b4:	2301      	movs	r3, #1
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039dc:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d045      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd fe54 	bl	8001698 <HAL_GetTick>
 80039f0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fd fe50 	bl	8001698 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e086      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	2302      	movs	r3, #2
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	61fb      	str	r3, [r7, #28]
  return result;
 8003a22:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d102      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	e007      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2202      	movs	r2, #2
 8003a50:	613a      	str	r2, [r7, #16]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	fa92 f2a2 	rbit	r2, r2
 8003a58:	60fa      	str	r2, [r7, #12]
  return result;
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	fab2 f282 	clz	r2, r2
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f002 021f 	and.w	r2, r2, #31
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0bd      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4926      	ldr	r1, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d105      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	491a      	ldr	r1, [pc, #104]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f023 0210 	bic.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4912      	ldr	r1, [pc, #72]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	490b      	ldr	r1, [pc, #44]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3748      	adds	r7, #72	; 0x48
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	10908100 	.word	0x10908100

08003b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e049      	b.n	8003bd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fc38 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f000 f8fe 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0b6      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x18a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c20:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c32:	d03e      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xd8>
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	f200 8087 	bhi.w	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	f000 8086 	beq.w	8003d50 <HAL_TIM_ConfigClockSource+0x176>
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d87f      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c4a:	2b70      	cmp	r3, #112	; 0x70
 8003c4c:	d01a      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0xaa>
 8003c4e:	2b70      	cmp	r3, #112	; 0x70
 8003c50:	d87b      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c52:	2b60      	cmp	r3, #96	; 0x60
 8003c54:	d050      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x11e>
 8003c56:	2b60      	cmp	r3, #96	; 0x60
 8003c58:	d877      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c5a:	2b50      	cmp	r3, #80	; 0x50
 8003c5c:	d03c      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0xfe>
 8003c5e:	2b50      	cmp	r3, #80	; 0x50
 8003c60:	d873      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d058      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0x13e>
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d86f      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c6a:	2b30      	cmp	r3, #48	; 0x30
 8003c6c:	d064      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x15e>
 8003c6e:	2b30      	cmp	r3, #48	; 0x30
 8003c70:	d86b      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d060      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x15e>
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d867      	bhi.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d05c      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x15e>
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d05a      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0x15e>
 8003c82:	e062      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f000 f95c 	bl	8003f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
      break;
 8003cb0:	e04f      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f000 f945 	bl	8003f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd4:	609a      	str	r2, [r3, #8]
      break;
 8003cd6:	e03c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f000 f8b9 	bl	8003e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2150      	movs	r1, #80	; 0x50
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f912 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003cf6:	e02c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f000 f8d8 	bl	8003eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2160      	movs	r1, #96	; 0x60
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f902 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003d16:	e01c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f000 f899 	bl	8003e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f8f2 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003d36:	e00c      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 f8e9 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a32      	ldr	r2, [pc, #200]	; (8003e48 <TIM_Base_SetConfig+0xdc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x28>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x28>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <TIM_Base_SetConfig+0xe0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <TIM_Base_SetConfig+0xdc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_Base_SetConfig+0x6a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d00f      	beq.n	8003dd6 <TIM_Base_SetConfig+0x6a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <TIM_Base_SetConfig+0xe0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x6a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <TIM_Base_SetConfig+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0x6a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <TIM_Base_SetConfig+0xe8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0x6a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <TIM_Base_SetConfig+0xec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <TIM_Base_SetConfig+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0xc0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <TIM_Base_SetConfig+0xe4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0xc0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <TIM_Base_SetConfig+0xe8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0xc0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <TIM_Base_SetConfig+0xec>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40014400 	.word	0x40014400
 8003e58:	40014800 	.word	0x40014800

08003e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 030a 	bic.w	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b087      	sub	sp, #28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0210 	bic.w	r2, r3, #16
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f043 0307 	orr.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e054      	b.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a24      	ldr	r2, [pc, #144]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d009      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10c      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40014000 	.word	0x40014000

0800406c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e040      	b.n	8004100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd f9ba 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8c0 	bl	8004230 <UART_SetConfig>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e022      	b.n	8004100 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9ea 	bl	800449c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fa71 	bl	80045e0 <UART_CheckIdleState>
 80040fe:	4603      	mov	r3, r0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411c:	2b20      	cmp	r3, #32
 800411e:	f040 8082 	bne.w	8004226 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_Transmit+0x26>
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07a      	b.n	8004228 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit+0x38>
 800413c:	2302      	movs	r3, #2
 800413e:	e073      	b.n	8004228 <HAL_UART_Transmit+0x120>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2221      	movs	r2, #33	; 0x21
 8004154:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004156:	f7fd fa9f 	bl	8001698 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d108      	bne.n	8004188 <HAL_UART_Transmit+0x80>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e003      	b.n	8004190 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004198:	e02d      	b.n	80041f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa64 	bl	8004672 <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e039      	b.n	8004228 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c6:	b292      	uxth	r2, r2
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3302      	adds	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e008      	b.n	80041e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b292      	uxth	r2, r2
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1cb      	bne.n	800419a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	; 0x40
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa30 	bl	8004672 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e005      	b.n	8004228 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b8a      	ldr	r3, [pc, #552]	; (8004484 <UART_SetConfig+0x254>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	430b      	orrs	r3, r1
 8004266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a78      	ldr	r2, [pc, #480]	; (8004488 <UART_SetConfig+0x258>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d120      	bne.n	80042ee <UART_SetConfig+0xbe>
 80042ac:	4b77      	ldr	r3, [pc, #476]	; (800448c <UART_SetConfig+0x25c>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d817      	bhi.n	80042e8 <UART_SetConfig+0xb8>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x90>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042e3 	.word	0x080042e3
 80042cc:	080042d7 	.word	0x080042d7
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e01d      	b.n	8004312 <UART_SetConfig+0xe2>
 80042d6:	2302      	movs	r3, #2
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e01a      	b.n	8004312 <UART_SetConfig+0xe2>
 80042dc:	2304      	movs	r3, #4
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e017      	b.n	8004312 <UART_SetConfig+0xe2>
 80042e2:	2308      	movs	r3, #8
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e014      	b.n	8004312 <UART_SetConfig+0xe2>
 80042e8:	2310      	movs	r3, #16
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e011      	b.n	8004312 <UART_SetConfig+0xe2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a67      	ldr	r2, [pc, #412]	; (8004490 <UART_SetConfig+0x260>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d102      	bne.n	80042fe <UART_SetConfig+0xce>
 80042f8:	2300      	movs	r3, #0
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e009      	b.n	8004312 <UART_SetConfig+0xe2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a64      	ldr	r2, [pc, #400]	; (8004494 <UART_SetConfig+0x264>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d102      	bne.n	800430e <UART_SetConfig+0xde>
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e001      	b.n	8004312 <UART_SetConfig+0xe2>
 800430e:	2310      	movs	r3, #16
 8004310:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431a:	d15b      	bne.n	80043d4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d827      	bhi.n	8004372 <UART_SetConfig+0x142>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0xf8>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004355 	.word	0x08004355
 8004330:	0800435d 	.word	0x0800435d
 8004334:	08004373 	.word	0x08004373
 8004338:	08004363 	.word	0x08004363
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	0800436b 	.word	0x0800436b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7ff fa84 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004350:	61b8      	str	r0, [r7, #24]
        break;
 8004352:	e013      	b.n	800437c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7ff faa2 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b4e      	ldr	r3, [pc, #312]	; (8004498 <UART_SetConfig+0x268>)
 800435e:	61bb      	str	r3, [r7, #24]
        break;
 8004360:	e00c      	b.n	800437c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7ff fa03 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8004366:	61b8      	str	r0, [r7, #24]
        break;
 8004368:	e008      	b.n	800437c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e004      	b.n	800437c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	77bb      	strb	r3, [r7, #30]
        break;
 800437a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d074      	beq.n	800446c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d916      	bls.n	80043ce <UART_SetConfig+0x19e>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d212      	bcs.n	80043ce <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f023 030f 	bic.w	r3, r3, #15
 80043b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	b29a      	uxth	r2, r3
 80043be:	89fb      	ldrh	r3, [r7, #14]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	89fa      	ldrh	r2, [r7, #14]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e04e      	b.n	800446c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77bb      	strb	r3, [r7, #30]
 80043d2:	e04b      	b.n	800446c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d827      	bhi.n	800442a <UART_SetConfig+0x1fa>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x1b0>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7ff fa28 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7ff fa46 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b20      	ldr	r3, [pc, #128]	; (8004498 <UART_SetConfig+0x268>)
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7ff f9a7 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800441e:	61b8      	str	r0, [r7, #24]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	77bb      	strb	r3, [r7, #30]
        break;
 8004432:	bf00      	nop
    }

    if (pclk != 0U)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085a      	lsrs	r2, r3, #1
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	441a      	add	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d908      	bls.n	8004468 <UART_SetConfig+0x238>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d204      	bcs.n	8004468 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e001      	b.n	800446c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004478:	7fbb      	ldrb	r3, [r7, #30]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	efff69f3 	.word	0xefff69f3
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	40004800 	.word	0x40004800
 8004498:	007a1200 	.word	0x007a1200

0800449c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459a:	d10a      	bne.n	80045b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f0:	f7fd f852 	bl	8001698 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b08      	cmp	r3, #8
 8004602:	d10e      	bne.n	8004622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f82d 	bl	8004672 <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e023      	b.n	800466a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d10e      	bne.n	800464e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f817 	bl	8004672 <UART_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00d      	b.n	800466a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b09c      	sub	sp, #112	; 0x70
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004682:	e0a5      	b.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	f000 80a1 	beq.w	80047d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7fd f803 	bl	8001698 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800469e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d13e      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046b8:	667b      	str	r3, [r7, #100]	; 0x64
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e6      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3308      	adds	r3, #8
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	663b      	str	r3, [r7, #96]	; 0x60
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e067      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04f      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473e:	d147      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004748:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800476e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	613b      	str	r3, [r7, #16]
   return(result);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800479c:	623a      	str	r2, [r7, #32]
 800479e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e010      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	f43f af4a 	beq.w	8004684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3770      	adds	r7, #112	; 0x70
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	; (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	; (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	; (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	; (8004840 <__libc_init_array+0x44>)
 8004810:	f000 f820 	bl	8004854 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	080048e0 	.word	0x080048e0
 8004838:	080048e0 	.word	0x080048e0
 800483c:	080048e0 	.word	0x080048e0
 8004840:	080048e4 	.word	0x080048e4

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
