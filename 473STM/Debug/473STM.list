
473STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003494  08003494  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003494  08003494  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1c2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018db  00000000  00000000  0002c1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c9a  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6ac  00000000  00000000  00048942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b9f  00000000  00000000  00054fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ecb8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002578  00000000  00000000  000ecbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003438 	.word	0x08003438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003438 	.word	0x08003438

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa77 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f851 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f913 	bl	8000400 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f8e1 	bl	80003a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80001de:	f000 f89f 	bl	8000320 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[12] = "Hello world";
 80001e2:	4a22      	ldr	r2, [pc, #136]	; (800026c <main+0xa4>)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t result = 0xFF;
 80001ec:	23ff      	movs	r3, #255	; 0xff
 80001ee:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c1,BMP_ADDR,0xF4,1,&result,1,100);
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9302      	str	r3, [sp, #8]
 80001f4:	2301      	movs	r3, #1
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	1cfb      	adds	r3, r7, #3
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2301      	movs	r3, #1
 80001fe:	22f4      	movs	r2, #244	; 0xf4
 8000200:	21ee      	movs	r1, #238	; 0xee
 8000202:	481b      	ldr	r0, [pc, #108]	; (8000270 <main+0xa8>)
 8000204:	f000 fdce 	bl	8000da4 <HAL_I2C_Mem_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	result = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1,msg,12,100);
 800020c:	1d39      	adds	r1, r7, #4
 800020e:	2364      	movs	r3, #100	; 0x64
 8000210:	220c      	movs	r2, #12
 8000212:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0xac>)
 8000214:	f002 fd6a 	bl	8002cec <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 fab6 	bl	800078c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xFA,1,&result,1,100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	9302      	str	r3, [sp, #8]
 8000224:	2301      	movs	r3, #1
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	1cfb      	adds	r3, r7, #3
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2301      	movs	r3, #1
 800022e:	22fa      	movs	r2, #250	; 0xfa
 8000230:	21ee      	movs	r1, #238	; 0xee
 8000232:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0xa8>)
 8000234:	f000 feca 	bl	8000fcc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xFB,1,&result,1,100);
 8000238:	2364      	movs	r3, #100	; 0x64
 800023a:	9302      	str	r3, [sp, #8]
 800023c:	2301      	movs	r3, #1
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2301      	movs	r3, #1
 8000246:	22fb      	movs	r2, #251	; 0xfb
 8000248:	21ee      	movs	r1, #238	; 0xee
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <main+0xa8>)
 800024c:	f000 febe 	bl	8000fcc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,BMP_ADDR,0xFC,1,&result,1,100);
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	9302      	str	r3, [sp, #8]
 8000254:	2301      	movs	r3, #1
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	1cfb      	adds	r3, r7, #3
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2301      	movs	r3, #1
 800025e:	22fc      	movs	r2, #252	; 0xfc
 8000260:	21ee      	movs	r1, #238	; 0xee
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <main+0xa8>)
 8000264:	f000 feb2 	bl	8000fcc <HAL_I2C_Mem_Read>
	result = 0;
 8000268:	e7ce      	b.n	8000208 <main+0x40>
 800026a:	bf00      	nop
 800026c:	08003450 	.word	0x08003450
 8000270:	20000028 	.word	0x20000028
 8000274:	20000074 	.word	0x20000074

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f8ce 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fa61 	bl	8001788 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002cc:	f000 f8e0 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	f107 031c 	add.w	r3, r7, #28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 f954 	bl	8002598 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f8cb 	bl	8000490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002fa:	2321      	movs	r3, #33	; 0x21
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fb7b 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000314:	f000 f8bc 	bl	8000490 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3758      	adds	r7, #88	; 0x58
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_I2C1_Init+0x74>)
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <MX_I2C1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_I2C1_Init+0x74>)
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_I2C1_Init+0x7c>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_I2C1_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <MX_I2C1_Init+0x74>)
 800035c:	f000 fc92 	bl	8000c84 <HAL_I2C_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000366:	f000 f893 	bl	8000490 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <MX_I2C1_Init+0x74>)
 800036e:	f001 f973 	bl	8001658 <HAL_I2CEx_ConfigAnalogFilter>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000378:	f000 f88a 	bl	8000490 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_I2C1_Init+0x74>)
 8000380:	f001 f9b5 	bl	80016ee <HAL_I2CEx_ConfigDigitalFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f881 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028
 8000398:	40005400 	.word	0x40005400
 800039c:	2000090e 	.word	0x2000090e

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003ac:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003c8:	220c      	movs	r2, #12
 80003ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_USART1_UART_Init+0x58>)
 80003e6:	f002 fc33 	bl	8002c50 <HAL_UART_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80003f0:	f000 f84e 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000074 	.word	0x20000074
 80003fc:	40013800 	.word	0x40013800

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 030c 	add.w	r3, r7, #12
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <MX_GPIO_Init+0x8c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <MX_GPIO_Init+0x8c>)
 800041c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_GPIO_Init+0x8c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_GPIO_Init+0x8c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a16      	ldr	r2, [pc, #88]	; (800048c <MX_GPIO_Init+0x8c>)
 8000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_GPIO_Init+0x8c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_GPIO_Init+0x8c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a10      	ldr	r2, [pc, #64]	; (800048c <MX_GPIO_Init+0x8c>)
 800044c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_GPIO_Init+0x8c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800045e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000464:	2302      	movs	r3, #2
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000470:	2307      	movs	r3, #7
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fa8f 	bl	80009a0 <HAL_GPIO_Init>

}
 8000482:	bf00      	nop
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_I2C_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d127      	bne.n	8000556 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_I2C_MspInit+0x80>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_I2C_MspInit+0x80>)
 800050c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_I2C_MspInit+0x80>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800051e:	23c0      	movs	r3, #192	; 0xc0
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000522:	2312      	movs	r3, #18
 8000524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800052e:	2304      	movs	r3, #4
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <HAL_I2C_MspInit+0x84>)
 800053a:	f000 fa31 	bl	80009a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_I2C_MspInit+0x80>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_I2C_MspInit+0x80>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_I2C_MspInit+0x80>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3728      	adds	r7, #40	; 0x28
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40005400 	.word	0x40005400
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a18      	ldr	r2, [pc, #96]	; (80005ec <HAL_UART_MspInit+0x80>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d129      	bne.n	80005e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_UART_MspInit+0x84>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_UART_MspInit+0x84>)
 8000594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_UART_MspInit+0x84>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_UART_MspInit+0x84>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <HAL_UART_MspInit+0x84>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_UART_MspInit+0x84>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005d0:	2307      	movs	r3, #7
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f000 f9df 	bl	80009a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40013800 	.word	0x40013800
 80005f0:	40021000 	.word	0x40021000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f884 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ffd7 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fea1 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fd93 	bl	80001c8 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	0800349c 	.word	0x0800349c
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	200000fc 	.word	0x200000fc

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f931 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fede 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f93b 	bl	8000986 <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f911 	bl	800094e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	200000f8 	.word	0x200000f8

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000f8 	.word	0x200000f8

0800078c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000794:	f7ff ffee 	bl	8000774 <HAL_GetTick>
 8000798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a4:	d005      	beq.n	80007b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_Delay+0x44>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007b2:	bf00      	nop
 80007b4:	f7ff ffde 	bl	8000774 <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8f7      	bhi.n	80007b4 <HAL_Delay+0x28>
  {
  }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ff8e 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff47 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff5c 	bl	800081c <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff8e 	bl	800088c <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffb0 	bl	80008f4 <SysTick_Config>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e14e      	b.n	8000c4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 8140 	beq.w	8000c48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d005      	beq.n	80009e0 <HAL_GPIO_Init+0x40>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d130      	bne.n	8000a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a16:	2201      	movs	r2, #1
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	f003 0201 	and.w	r2, r3, #1
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d017      	beq.n	8000a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	2203      	movs	r2, #3
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d123      	bne.n	8000ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	08da      	lsrs	r2, r3, #3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3208      	adds	r2, #8
 8000a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	691a      	ldr	r2, [r3, #16]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f003 0307 	and.w	r3, r3, #7
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	08da      	lsrs	r2, r3, #3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3208      	adds	r2, #8
 8000acc:	6939      	ldr	r1, [r7, #16]
 8000ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0203 	and.w	r2, r3, #3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 809a 	beq.w	8000c48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b14:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a54      	ldr	r2, [pc, #336]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <HAL_GPIO_Init+0x2cc>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b2c:	4a50      	ldr	r2, [pc, #320]	; (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b56:	d013      	beq.n	8000b80 <HAL_GPIO_Init+0x1e0>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a46      	ldr	r2, [pc, #280]	; (8000c74 <HAL_GPIO_Init+0x2d4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00d      	beq.n	8000b7c <HAL_GPIO_Init+0x1dc>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <HAL_GPIO_Init+0x2d8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x1d8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a44      	ldr	r2, [pc, #272]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <HAL_GPIO_Init+0x1d4>
 8000b70:	2303      	movs	r3, #3
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b74:	2305      	movs	r3, #5
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b80:	2300      	movs	r3, #0
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b92:	4937      	ldr	r1, [pc, #220]	; (8000c70 <HAL_GPIO_Init+0x2d0>)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc4:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bee:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f47f aea9 	bne.w	80009b0 <HAL_GPIO_Init+0x10>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000c00 	.word	0x48000c00
 8000c80:	40010400 	.word	0x40010400

08000c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e081      	b.n	8000d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d106      	bne.n	8000cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fc1a 	bl	80004e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2224      	movs	r2, #36	; 0x24
 8000cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d107      	bne.n	8000cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d104      	bne.n	8000d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69d9      	ldr	r1, [r3, #28]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1a      	ldr	r2, [r3, #32]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2220      	movs	r2, #32
 8000d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	4608      	mov	r0, r1
 8000dae:	4611      	mov	r1, r2
 8000db0:	461a      	mov	r2, r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	817b      	strh	r3, [r7, #10]
 8000db6:	460b      	mov	r3, r1
 8000db8:	813b      	strh	r3, [r7, #8]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	f040 80f9 	bne.w	8000fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_I2C_Mem_Write+0x34>
 8000dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0ed      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <HAL_I2C_Mem_Write+0x4e>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e0e6      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000dfa:	f7ff fcbb 	bl	8000774 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2319      	movs	r3, #25
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f000 fac3 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e0d1      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2221      	movs	r2, #33	; 0x21
 8000e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6a3a      	ldr	r2, [r7, #32]
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e44:	88f8      	ldrh	r0, [r7, #6]
 8000e46:	893a      	ldrh	r2, [r7, #8]
 8000e48:	8979      	ldrh	r1, [r7, #10]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4603      	mov	r3, r0
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 f9d3 	bl	8001200 <I2C_RequestMemoryWrite>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0a9      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d90e      	bls.n	8000e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	8979      	ldrh	r1, [r7, #10]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 fbb5 	bl	80015fc <I2C_TransferConfig>
 8000e92:	e00f      	b.n	8000eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	8979      	ldrh	r1, [r7, #10]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 fba4 	bl	80015fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f000 faad 	bl	8001418 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e07b      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d034      	beq.n	8000f6c <HAL_I2C_Mem_Write+0x1c8>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d130      	bne.n	8000f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	2200      	movs	r2, #0
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 fa3f 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e04d      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2bff      	cmp	r3, #255	; 0xff
 8000f2c:	d90e      	bls.n	8000f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	22ff      	movs	r2, #255	; 0xff
 8000f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	8979      	ldrh	r1, [r7, #10]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 fb59 	bl	80015fc <I2C_TransferConfig>
 8000f4a:	e00f      	b.n	8000f6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	8979      	ldrh	r1, [r7, #10]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 fb48 	bl	80015fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d19e      	bne.n	8000eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 fa8c 	bl	8001498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e01a      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_I2C_Mem_Write+0x224>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000fbe:	2302      	movs	r3, #2
  }
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	fe00e800 	.word	0xfe00e800

08000fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	817b      	strh	r3, [r7, #10]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	813b      	strh	r3, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	f040 80fd 	bne.w	80011ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_I2C_Mem_Read+0x34>
 8000ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0f1      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_I2C_Mem_Read+0x4e>
 8001016:	2302      	movs	r3, #2
 8001018:	e0ea      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001022:	f7ff fba7 	bl	8000774 <HAL_GetTick>
 8001026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2319      	movs	r3, #25
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f9af 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0d5      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2222      	movs	r2, #34	; 0x22
 8001048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a3a      	ldr	r2, [r7, #32]
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800106c:	88f8      	ldrh	r0, [r7, #6]
 800106e:	893a      	ldrh	r2, [r7, #8]
 8001070:	8979      	ldrh	r1, [r7, #10]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4603      	mov	r3, r0
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f913 	bl	80012a8 <I2C_RequestMemoryRead>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0ad      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29b      	uxth	r3, r3
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d90e      	bls.n	80010bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	8979      	ldrh	r1, [r7, #10]
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <HAL_I2C_Mem_Read+0x22c>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 faa1 	bl	80015fc <I2C_TransferConfig>
 80010ba:	e00f      	b.n	80010dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	8979      	ldrh	r1, [r7, #10]
 80010ce:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <HAL_I2C_Mem_Read+0x22c>)
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa90 	bl	80015fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	2104      	movs	r1, #4
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f956 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e07c      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001112:	3b01      	subs	r3, #1
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d034      	beq.n	800119c <HAL_I2C_Mem_Read+0x1d0>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	d130      	bne.n	800119c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f927 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e04d      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001158:	b29b      	uxth	r3, r3
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	d90e      	bls.n	800117c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001168:	b2da      	uxtb	r2, r3
 800116a:	8979      	ldrh	r1, [r7, #10]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 fa41 	bl	80015fc <I2C_TransferConfig>
 800117a:	e00f      	b.n	800119c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118a:	b2da      	uxtb	r2, r3
 800118c:	8979      	ldrh	r1, [r7, #10]
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 fa30 	bl	80015fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d19a      	bne.n	80010dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f974 	bl	8001498 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e01a      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2220      	movs	r2, #32
 80011c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_I2C_Mem_Read+0x230>)
 80011ce:	400b      	ands	r3, r1
 80011d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	80002400 	.word	0x80002400
 80011fc:	fe00e800 	.word	0xfe00e800

08001200 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	817b      	strh	r3, [r7, #10]
 8001212:	460b      	mov	r3, r1
 8001214:	813b      	strh	r3, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	8979      	ldrh	r1, [r7, #10]
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <I2C_RequestMemoryWrite+0xa4>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 f9e7 	bl	80015fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	69b9      	ldr	r1, [r7, #24]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f8f0 	bl	8001418 <I2C_WaitOnTXISFlagUntilTimeout>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e02c      	b.n	800129c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001248:	893b      	ldrh	r3, [r7, #8]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
 8001252:	e015      	b.n	8001280 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001254:	893b      	ldrh	r3, [r7, #8]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2da      	uxtb	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	69b9      	ldr	r1, [r7, #24]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 f8d6 	bl	8001418 <I2C_WaitOnTXISFlagUntilTimeout>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e012      	b.n	800129c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001276:	893b      	ldrh	r3, [r7, #8]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f884 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	80002000 	.word	0x80002000

080012a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	817b      	strh	r3, [r7, #10]
 80012ba:	460b      	mov	r3, r1
 80012bc:	813b      	strh	r3, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	8979      	ldrh	r1, [r7, #10]
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <I2C_RequestMemoryRead+0xa4>)
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f994 	bl	80015fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f89d 	bl	8001418 <I2C_WaitOnTXISFlagUntilTimeout>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e02c      	b.n	8001342 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012ee:	893b      	ldrh	r3, [r7, #8]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
 80012f8:	e015      	b.n	8001326 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012fa:	893b      	ldrh	r3, [r7, #8]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f883 	bl	8001418 <I2C_WaitOnTXISFlagUntilTimeout>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e012      	b.n	8001342 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800131c:	893b      	ldrh	r3, [r7, #8]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2200      	movs	r2, #0
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 f831 	bl	8001398 <I2C_WaitOnFlagUntilTimeout>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	80002000 	.word	0x80002000

08001350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d103      	bne.n	800136e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b01      	cmp	r3, #1
 800137a:	d007      	beq.n	800138c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	619a      	str	r2, [r3, #24]
  }
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013a8:	e022      	b.n	80013f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d01e      	beq.n	80013f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b2:	f7ff f9df 	bl	8000774 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d302      	bcc.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d113      	bne.n	80013f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f043 0220 	orr.w	r2, r3, #32
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2220      	movs	r2, #32
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00f      	b.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4013      	ands	r3, r2
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	429a      	cmp	r2, r3
 800140c:	d0cd      	beq.n	80013aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001424:	e02c      	b.n	8001480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f870 	bl	8001510 <I2C_IsAcknowledgeFailed>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e02a      	b.n	8001490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d01e      	beq.n	8001480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001442:	f7ff f997 	bl	8000774 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	429a      	cmp	r2, r3
 8001450:	d302      	bcc.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d113      	bne.n	8001480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f043 0220 	orr.w	r2, r3, #32
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e007      	b.n	8001490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d1cb      	bne.n	8001426 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014a4:	e028      	b.n	80014f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f830 	bl	8001510 <I2C_IsAcknowledgeFailed>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e026      	b.n	8001508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ba:	f7ff f95b 	bl	8000774 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d302      	bcc.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d113      	bne.n	80014f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f043 0220 	orr.w	r2, r3, #32
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2220      	movs	r2, #32
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e007      	b.n	8001508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b20      	cmp	r3, #32
 8001504:	d1cf      	bne.n	80014a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b10      	cmp	r3, #16
 8001528:	d161      	bne.n	80015ee <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001538:	d02b      	beq.n	8001592 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001548:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154a:	e022      	b.n	8001592 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001552:	d01e      	beq.n	8001592 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001554:	f7ff f90e 	bl	8000774 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d302      	bcc.n	800156a <I2C_IsAcknowledgeFailed+0x5a>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d113      	bne.n	8001592 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f043 0220 	orr.w	r2, r3, #32
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e02e      	b.n	80015f0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b20      	cmp	r3, #32
 800159e:	d1d5      	bne.n	800154c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2210      	movs	r2, #16
 80015a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2220      	movs	r2, #32
 80015ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff fecd 	bl	8001350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <I2C_IsAcknowledgeFailed+0xe8>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f043 0204 	orr.w	r2, r3, #4
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	fe00e800 	.word	0xfe00e800

080015fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	817b      	strh	r3, [r7, #10]
 800160a:	4613      	mov	r3, r2
 800160c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	0d5b      	lsrs	r3, r3, #21
 8001618:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <I2C_TransferConfig+0x58>)
 800161e:	430b      	orrs	r3, r1
 8001620:	43db      	mvns	r3, r3
 8001622:	ea02 0103 	and.w	r1, r2, r3
 8001626:	897b      	ldrh	r3, [r7, #10]
 8001628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800162c:	7a7b      	ldrb	r3, [r7, #9]
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	431a      	orrs	r2, r3
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	03ff63ff 	.word	0x03ff63ff

08001658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	d138      	bne.n	80016e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001678:	2302      	movs	r3, #2
 800167a:	e032      	b.n	80016e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2224      	movs	r2, #36	; 0x24
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b20      	cmp	r3, #32
 8001702:	d139      	bne.n	8001778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800170e:	2302      	movs	r3, #2
 8001710:	e033      	b.n	800177a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2224      	movs	r2, #36	; 0x24
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	e000      	b.n	800177a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001778:	2302      	movs	r3, #2
  }
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800178e:	af00      	add	r7, sp, #0
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	f000 bef4 	b.w	800258a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 816a 	beq.w	8001a86 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017b2:	4bb3      	ldr	r3, [pc, #716]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017be:	4bb0      	ldr	r3, [pc, #704]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d159      	bne.n	800187e <HAL_RCC_OscConfig+0xf6>
 80017ca:	4bad      	ldr	r3, [pc, #692]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d152      	bne.n	800187e <HAL_RCC_OscConfig+0xf6>
 80017d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x82>
 8001804:	4b9e      	ldr	r3, [pc, #632]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0xae>
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800181e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001822:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001826:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001832:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800183e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001842:	fa92 f2a2 	rbit	r2, r2
 8001846:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800184a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 810c 	beq.w	8001a84 <HAL_RCC_OscConfig+0x2fc>
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8106 	bne.w	8001a84 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f000 be86 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x110>
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e030      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x134>
 80018a2:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a76      	ldr	r2, [pc, #472]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01e      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x15a>
 80018c8:	4b6d      	ldr	r3, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6c      	ldr	r2, [pc, #432]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f023 020f 	bic.w	r2, r3, #15
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	495d      	ldr	r1, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 800190a:	4313      	orrs	r3, r2
 800190c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d059      	beq.n	80019cc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7fe ff2c 	bl	8000774 <HAL_GetTick>
 800191c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001922:	f7fe ff27 	bl	8000774 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d902      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	f000 be29 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800194c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x1e2>
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x20e>
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001986:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800199e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019a2:	fa92 f2a2 	rbit	r2, r2
 80019a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 021f 	and.w	r2, r2, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ab      	beq.n	8001922 <HAL_RCC_OscConfig+0x19a>
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe fed2 	bl	8000774 <HAL_GetTick>
 80019d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7fe fecd 	bl	8000774 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d902      	bls.n	80019ec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	f000 bdcf 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x2c2>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ab      	bne.n	80019d6 <HAL_RCC_OscConfig+0x24e>
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_OscConfig+0x2fe>
 8001a80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 816f 	beq.w	8001d74 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a96:	4bd0      	ldr	r3, [pc, #832]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa2:	4bcd      	ldr	r3, [pc, #820]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d16c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x400>
 8001aae:	4bca      	ldr	r3, [pc, #808]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d166      	bne.n	8001b88 <HAL_RCC_OscConfig+0x400>
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001acc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_OscConfig+0x362>
 8001ae4:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e013      	b.n	8001b12 <HAL_RCC_OscConfig+0x38a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b0e:	4bb2      	ldr	r3, [pc, #712]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2202      	movs	r2, #2
 8001b14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b24:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f000 bd1b 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	21f8      	movs	r1, #248	; 0xf8
 8001b64:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b6c:	fa91 f1a1 	rbit	r1, r1
 8001b70:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b78:	fab1 f181 	clz	r1, r1
 8001b7c:	b2c9      	uxtb	r1, r1
 8001b7e:	408b      	lsls	r3, r1
 8001b80:	4995      	ldr	r1, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e0f5      	b.n	8001d74 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8085 	beq.w	8001c9e <HAL_RCC_OscConfig+0x516>
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ba6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fdd8 	bl	8000774 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7fe fdd3 	bl	8000774 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d902      	bls.n	8001be0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f000 bcd5 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x488>
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x4b0>
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0af      	beq.n	8001bca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	21f8      	movs	r1, #248	; 0xf8
 8001c7a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c82:	fa91 f1a1 	rbit	r1, r1
 8001c86:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c8a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c8e:	fab1 f181 	clz	r1, r1
 8001c92:	b2c9      	uxtb	r1, r1
 8001c94:	408b      	lsls	r3, r1
 8001c96:	4950      	ldr	r1, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e06a      	b.n	8001d74 <HAL_RCC_OscConfig+0x5ec>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe fd53 	bl	8000774 <HAL_GetTick>
 8001cce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7fe fd4e 	bl	8000774 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d902      	bls.n	8001cea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f000 bc50 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x592>
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e013      	b.n	8001d42 <HAL_RCC_OscConfig+0x5ba>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2202      	movs	r2, #2
 8001d44:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d48:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d4c:	fa92 f2a2 	rbit	r2, r2
 8001d50:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d54:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f002 021f 	and.w	r2, r2, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1af      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80da 	beq.w	8001f38 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d069      	beq.n	8001e62 <HAL_RCC_OscConfig+0x6da>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x654>)
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	461a      	mov	r2, r3
 8001db4:	2301      	movs	r3, #1
 8001db6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe fcdc 	bl	8000774 <HAL_GetTick>
 8001dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc0:	e00e      	b.n	8001de0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7fe fcd7 	bl	8000774 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d906      	bls.n	8001de0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3d9      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	10908120 	.word	0x10908120
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001df2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e0e:	2202      	movs	r2, #2
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4ba5      	ldr	r3, [pc, #660]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	6019      	str	r1, [r3, #0]
 8001e2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f1a3 	rbit	r1, r3
 8001e38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e3c:	6019      	str	r1, [r3, #0]
  return result;
 8001e3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0b0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x63a>
 8001e60:	e06a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7b0>
 8001e62:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e7e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x934>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe fc6e 	bl	8000774 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7fe fc69 	bl	8000774 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e36b      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8001eb2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ef8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f02:	2102      	movs	r1, #2
 8001f04:	6019      	str	r1, [r3, #0]
 8001f06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f1a3 	rbit	r1, r3
 8001f10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f14:	6019      	str	r1, [r3, #0]
  return result;
 8001f16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1b2      	bne.n	8001e9e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8158 	beq.w	80021f8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d112      	bne.n	8001f80 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11a      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fbec 	bl	8000774 <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe fbe7 	bl	8000774 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e2e9      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ef      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x852>
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02f      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x876>
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e01d      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x89a>
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06b      	beq.n	800211c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe fb96 	bl	8000774 <HAL_GetTick>
 8002048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fb91 	bl	8000774 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e291      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002066:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002082:	2202      	movs	r2, #2
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800209a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_OscConfig+0x93c>
 80020b0:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x958>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	10908120 	.word	0x10908120
 80020c0:	40007000 	.word	0x40007000
 80020c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020c8:	2202      	movs	r2, #2
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4bbb      	ldr	r3, [pc, #748]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020e4:	2102      	movs	r1, #2
 80020e6:	6011      	str	r1, [r2, #0]
 80020e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	fa92 f1a2 	rbit	r1, r2
 80020f2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d099      	beq.n	800204e <HAL_RCC_OscConfig+0x8c6>
 800211a:	e063      	b.n	80021e4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fb2a 	bl	8000774 <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fb25 	bl	8000774 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e225      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 800213e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002172:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <HAL_RCC_OscConfig+0xa06>
 8002188:	4b90      	ldr	r3, [pc, #576]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	e00d      	b.n	80021aa <HAL_RCC_OscConfig+0xa22>
 800218e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021ae:	2102      	movs	r1, #2
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	fa92 f1a2 	rbit	r1, r2
 80021bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1a0      	bne.n	8002126 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b77      	ldr	r3, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a76      	ldr	r2, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 81c2 	beq.w	8002588 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	f000 819c 	beq.w	800254a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 8114 	bne.w	8002446 <HAL_RCC_OscConfig+0xcbe>
 800221e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800223c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fa8e 	bl	8000774 <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e009      	b.n	8002272 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fa89 	bl	8000774 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e18b      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002272:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002290:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0xb24>
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0xb5c>
 80022ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	fa92 f1a2 	rbit	r1, r2
 80022f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022fc:	6011      	str	r1, [r2, #0]
  return result;
 80022fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d19e      	bne.n	800225e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	430b      	orrs	r3, r1
 8002336:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
 800233c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002354:	601a      	str	r2, [r3, #0]
  return result;
 8002356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800235a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe f9ff 	bl	8000774 <HAL_GetTick>
 8002376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237a:	e009      	b.n	8002390 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe f9fa 	bl	8000774 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0fc      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002390:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023a8:	601a      	str	r2, [r3, #0]
  return result;
 80023aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0xc48>
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e01e      	b.n	8002408 <HAL_RCC_OscConfig+0xc80>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800240c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002410:	6011      	str	r1, [r2, #0]
 8002412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fa92 f1a2 	rbit	r1, r2
 800241c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002420:	6011      	str	r1, [r2, #0]
  return result;
 8002422:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f002 021f 	and.w	r2, r2, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d09b      	beq.n	800237c <HAL_RCC_OscConfig+0xbf4>
 8002444:	e0a0      	b.n	8002588 <HAL_RCC_OscConfig+0xe00>
 8002446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245e:	601a      	str	r2, [r3, #0]
  return result;
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002470:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe f97a 	bl	8000774 <HAL_GetTick>
 8002480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e009      	b.n	800249a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe f975 	bl	8000774 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e077      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 800249a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	601a      	str	r2, [r3, #0]
  return result;
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd4c>
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0xd84>
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f107 0318 	add.w	r3, r7, #24
 80024f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f107 0210 	add.w	r2, r7, #16
 8002510:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002514:	6011      	str	r1, [r2, #0]
 8002516:	f107 0210 	add.w	r2, r7, #16
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	fa92 f1a2 	rbit	r1, r2
 8002520:	f107 020c 	add.w	r2, r7, #12
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d19e      	bne.n	8002486 <HAL_RCC_OscConfig+0xcfe>
 8002548:	e01e      	b.n	8002588 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002560:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	429a      	cmp	r2, r3
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002572:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b09e      	sub	sp, #120	; 0x78
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e162      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d910      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	498b      	ldr	r1, [pc, #556]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e14a      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	497f      	ldr	r1, [pc, #508]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80dc 	beq.w	80027c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d13c      	bne.n	800268e <HAL_RCC_ClockConfig+0xf6>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_RCC_ClockConfig+0xa6>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e00f      	b.n	800265e <HAL_RCC_ClockConfig+0xc6>
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
 800264c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002650:	663b      	str	r3, [r7, #96]	; 0x60
 8002652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002662:	65ba      	str	r2, [r7, #88]	; 0x58
 8002664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800266c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d17b      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0f3      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d13c      	bne.n	8002710 <HAL_RCC_ClockConfig+0x178>
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x128>
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_ClockConfig+0x148>
 80026c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d2:	643b      	str	r3, [r7, #64]	; 0x40
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80026e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b2      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 8002710:	2302      	movs	r3, #2
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e00d      	b.n	8002754 <HAL_RCC_ClockConfig+0x1bc>
 8002738:	2302      	movs	r3, #2
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	61ba      	str	r2, [r7, #24]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	617a      	str	r2, [r7, #20]
  return result;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e079      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fd ffee 	bl	8000774 <HAL_GetTick>
 8002798:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fd ffea 	bl	8000774 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e061      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d214      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4906      	ldr	r1, [pc, #24]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e040      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	491a      	ldr	r1, [pc, #104]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4912      	ldr	r1, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283a:	f000 f829 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800283e:	4601      	mov	r1, r0
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	22f0      	movs	r2, #240	; 0xf0
 800284a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	60fa      	str	r2, [r7, #12]
  return result;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	40d3      	lsrs	r3, r2
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x2ec>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	fa21 f303 	lsr.w	r3, r1, r3
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_ClockConfig+0x2f0>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd ff3c 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3778      	adds	r7, #120	; 0x78
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	0800345c 	.word	0x0800345c
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e03c      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	607a      	str	r2, [r7, #4]
  return result;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	220f      	movs	r2, #15
 80028f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	60fa      	str	r2, [r7, #12]
  return result;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_RCC_GetSysClockFreq+0xcc>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	e004      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e002      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293c:	623b      	str	r3, [r7, #32]
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	6a3b      	ldr	r3, [r7, #32]
}
 8002942:	4618      	mov	r0, r3
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	08003474 	.word	0x08003474
 800295c:	08003484 	.word	0x08003484
 8002960:	003d0900 	.word	0x003d0900

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002982:	f7ff ffef 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	603a      	str	r2, [r7, #0]
  return result;
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	40d3      	lsrs	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	0800346c 	.word	0x0800346c

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029c6:	f7ff ffcd 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029ca:	4601      	mov	r1, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	603a      	str	r2, [r7, #0]
  return result;
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	0800346c 	.word	0x0800346c

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b092      	sub	sp, #72	; 0x48
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80cd 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a28:	4b86      	ldr	r3, [pc, #536]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b83      	ldr	r3, [pc, #524]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	61d3      	str	r3, [r2, #28]
 8002a40:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fd fe83 	bl	8000774 <HAL_GetTick>
 8002a6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fd fe7f 	bl	8000774 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0db      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a90:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d07d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d076      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b00:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d045      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fd fe30 	bl	8000774 <HAL_GetTick>
 8002b14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fd fe2c 	bl	8000774 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e086      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	623b      	str	r3, [r7, #32]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61fb      	str	r3, [r7, #28]
  return result;
 8002b46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	e007      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2202      	movs	r2, #2
 8002b74:	613a      	str	r2, [r7, #16]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0bd      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4926      	ldr	r1, [pc, #152]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	491a      	ldr	r1, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f023 0210 	bic.w	r2, r3, #16
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4912      	ldr	r1, [pc, #72]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	490b      	ldr	r1, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3748      	adds	r7, #72	; 0x48
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	10908100 	.word	0x10908100

08002c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e040      	b.n	8002ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fc7a 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8c0 	bl	8002e14 <UART_SetConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e022      	b.n	8002ce4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9ea 	bl	8003080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fa71 	bl	80031c4 <UART_CheckIdleState>
 8002ce2:	4603      	mov	r3, r0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	f040 8082 	bne.w	8002e0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_UART_Transmit+0x26>
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07a      	b.n	8002e0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Transmit+0x38>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e073      	b.n	8002e0c <HAL_UART_Transmit+0x120>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2221      	movs	r2, #33	; 0x21
 8002d38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3a:	f7fd fd1b 	bl	8000774 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Transmit+0x80>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002d7c:	e02d      	b.n	8002dda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fa64 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e039      	b.n	8002e0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002daa:	b292      	uxth	r2, r2
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e008      	b.n	8002dc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1cb      	bne.n	8002d7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fa30 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e005      	b.n	8002e0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <UART_SetConfig+0x254>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	6979      	ldr	r1, [r7, #20]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a78      	ldr	r2, [pc, #480]	; (800306c <UART_SetConfig+0x258>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d120      	bne.n	8002ed2 <UART_SetConfig+0xbe>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <UART_SetConfig+0x25c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d817      	bhi.n	8002ecc <UART_SetConfig+0xb8>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0x90>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ec7 	.word	0x08002ec7
 8002eb0:	08002ebb 	.word	0x08002ebb
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e01d      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e01a      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e017      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e014      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e011      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <UART_SetConfig+0x260>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <UART_SetConfig+0xce>
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e009      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	; (8003078 <UART_SetConfig+0x264>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <UART_SetConfig+0xde>
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e001      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d15b      	bne.n	8002fb8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d827      	bhi.n	8002f56 <UART_SetConfig+0x142>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0xf8>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff fd24 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff fd42 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b4e      	ldr	r3, [pc, #312]	; (800307c <UART_SetConfig+0x268>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff fca3 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d074      	beq.n	8003050 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	441a      	add	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d916      	bls.n	8002fb2 <UART_SetConfig+0x19e>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d212      	bcs.n	8002fb2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	89fa      	ldrh	r2, [r7, #14]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e04e      	b.n	8003050 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77bb      	strb	r3, [r7, #30]
 8002fb6:	e04b      	b.n	8003050 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d827      	bhi.n	800300e <UART_SetConfig+0x1fa>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x1b0>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08002ff9 	.word	0x08002ff9
 8002fd0:	0800300f 	.word	0x0800300f
 8002fd4:	08002fff 	.word	0x08002fff
 8002fd8:	0800300f 	.word	0x0800300f
 8002fdc:	0800300f 	.word	0x0800300f
 8002fe0:	0800300f 	.word	0x0800300f
 8002fe4:	08003007 	.word	0x08003007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7ff fcc8 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8002fec:	61b8      	str	r0, [r7, #24]
        break;
 8002fee:	e013      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff fce6 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	61b8      	str	r0, [r7, #24]
        break;
 8002ff6:	e00f      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <UART_SetConfig+0x268>)
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e00c      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffe:	f7ff fc47 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8003002:	61b8      	str	r0, [r7, #24]
        break;
 8003004:	e008      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300a:	61bb      	str	r3, [r7, #24]
        break;
 800300c:	e004      	b.n	8003018 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	77bb      	strb	r3, [r7, #30]
        break;
 8003016:	bf00      	nop
    }

    if (pclk != 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085a      	lsrs	r2, r3, #1
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d908      	bls.n	800304c <UART_SetConfig+0x238>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d204      	bcs.n	800304c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e001      	b.n	8003050 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800305c:	7fbb      	ldrb	r3, [r7, #30]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	efff69f3 	.word	0xefff69f3
 800306c:	40013800 	.word	0x40013800
 8003070:	40021000 	.word	0x40021000
 8003074:	40004400 	.word	0x40004400
 8003078:	40004800 	.word	0x40004800
 800307c:	007a1200 	.word	0x007a1200

08003080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01a      	beq.n	8003196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317e:	d10a      	bne.n	8003196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d4:	f7fd face 	bl	8000774 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d10e      	bne.n	8003206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f82d 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e023      	b.n	800324e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d10e      	bne.n	8003232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f817 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00d      	b.n	800324e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b09c      	sub	sp, #112	; 0x70
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	e0a5      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	f000 80a1 	beq.w	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fd fa7f 	bl	8000774 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <UART_WaitOnFlagUntilTimeout+0x32>
 8003282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003284:	2b00      	cmp	r3, #0
 8003286:	d13e      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800329c:	667b      	str	r3, [r7, #100]	; 0x64
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e6      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032da:	64ba      	str	r2, [r7, #72]	; 0x48
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e067      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d04f      	beq.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d147      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
 800334e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e6      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	613b      	str	r3, [r7, #16]
   return(result);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3308      	adds	r3, #8
 800337e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003380:	623a      	str	r2, [r7, #32]
 8003382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	69f9      	ldr	r1, [r7, #28]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	61bb      	str	r3, [r7, #24]
   return(result);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e010      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f43f af4a 	beq.w	8003268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3770      	adds	r7, #112	; 0x70
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f820 	bl	8003438 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003494 	.word	0x08003494
 800341c:	08003494 	.word	0x08003494
 8003420:	08003494 	.word	0x08003494
 8003424:	08003498 	.word	0x08003498

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
